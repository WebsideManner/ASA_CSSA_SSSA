\documentclass{report}
\usepackage{amsmath}

\begin{document}


<<echo=false>>=
source("../../ASA_CSSA_SSSA/R/map_functions.R")
library(ggplot2)
library(maps)
local.wd <- getwd()
setwd('../usda')
load.if.needed("full.covariates.dat")
setwd(local.wd)
@

<<>>=
rpn.dat <- read.csv("Statistics.csv", header = TRUE)
rpn.dat <- subset(rpn.dat,rpn.dat$Assessment=="GY")
rpn.dat <- subset(rpn.dat,rpn.dat$Statistic=="Mean")
rpn.dat$Value <- as.numeric(as.character(rpn.dat$Value))
rpn.dat$Trial <- as.factor(rpn.dat$Trial)
head(rpn.dat)

#convert to bu/acre
#Wheat/soybeans (60# bu)
#1 kilogram/hectare (kg/ha) = .0149 (.015) 
#bushels/acre
#1 bushel/acre = 67.25 (67) kilograms/hectare
rpn.dat$Value <- rpn.dat$Value * 0.0149

state.abbr <- c("ND","SD","NE","KS","OK","TX","WA","ID","MT","WY","CO","MN","IA","MO","NM")
state.abbr.map <- c("north dakota","south dakota","nebraska","kansas","oklahoma","texas","washington","idaho","montana","wyoming","colorado","minnesota","iowa","missouri","new mexico")
names(state.abbr.map) <- state.abbr 


#subset by state
locations.dat <- read.csv("Locations.csv", header = TRUE)
locations.dat <- subset(locations.dat, locations.dat$State %in% state.abbr)
locations.dat$State <- as.character(locations.dat$State)
locations.dat$State <- state.abbr.map[locations.dat$State]

# this lets us map location name to a county and state
statecounty.map <- as.character(paste(locations.dat$State,locations.dat$County,sep=","))
locations.dat$statecounty <- statecounty.map
names(statecounty.map) <- as.character(locations.dat$Name)
@

Now, generate an index
<<>>=
setwd('../usda/')
load.if.needed("full.late.dat")
setwd(local.wd)
yield.gap.dat <- subset(full.late.dat,full.late.dat$statecounty %in% locations.dat$statecounty)
head(full.late.dat)
head(yield.gap.dat)

gap.means <- tapply(yield.gap.dat$Value,list(yield.gap.dat$statecounty),mean,na.rm=TRUE)
ggmap.full.values(gap.means,names(gap.means),main="county means",legend="bu/ac")
@

Map nursery yield means to county means
<<>>=
rpn.dat$statecounty <- statecounty.map[as.character(rpn.dat$Location)]
yield.gap.dat$statecountyyear <- paste(yield.gap.dat$statecounty,yield.gap.dat$Year)
rpn.dat$statecountyyear <- paste(rpn.dat$statecounty,rpn.dat$Cycle)
actual <- yield.gap.dat$Value
names(actual) <- as.character(yield.gap.dat$statecountyyear)
rpn.dat$Actual <- actual[rpn.dat$statecountyyear]

rpn.dat$Actual <- as.numeric(as.character(rpn.dat$Actual))
rpn.dat$Value <- as.numeric(as.character(rpn.dat$Value))
rpn.dat <- subset(rpn.dat,!is.na(rpn.dat$Actual))

rpn.dat$Year <- as.factor(rpn.dat$Cycle)

rpn.dat$Location <- as.factor(rpn.dat$Location)

yield.gap.plot <- ggplot(rpn.dat, aes(Value,Actual),xlab="Nursery Average",ylab="County Average")
yield.gap.plot <- yield.gap.plot + geom_point(aes(color=Year)) + geom_smooth(aes(group= Year,color=Year),se = FALSE,method="lm")
yield.gap.plot

gap.frame <- data.frame(
  Year =  c(rpn.dat$Cycle,rpn.dat$Cycle),
  Source = c(rep("Nursery",length(rpn.dat$Value)),rep("County",length(rpn.dat$Value))),
  Yield = c(rpn.dat$Value,rpn.dat$Actual)
)
gap.frame$Source <- as.factor(gap.frame$Source)
yield.gap2.plot <- ggplot(gap.frame, aes(Year,Yield))
#yield.gap2.plot <- yield.gap2.plot + geom_point(aes(color=Source)) + geom_smooth(aes(group=Source,color=Source),se = FALSE,method="lm")
yield.gap2.plot <- yield.gap2.plot + geom_point(aes(color=Source)) + geom_smooth(aes(group=Source,color=Source),se = FALSE)
yield.gap2.plot
@

Compute the gap
<<>>=
nursery.counts <- tapply(rpn.dat$Value,list(rpn.dat$Location),length)
rpn.dat$Gap <- rpn.dat$Value - rpn.dat$Actual
rpn.dat$GapPercent <- 100*rpn.dat$Actual/rpn.dat$Value
rpn.dat$Count <- nursery.counts[rpn.dat$Location]
@

Some of the nurseries are irrigated; remove those
<<>>=
rpn.dat$Irrigated <- FALSE
irrigated <- c("Bushland (Irr)","Goodwell","Goodwell (Irr)","Hugoton (Irr)","Imperial (Irr)","Clovis (Irr)")

rpn.dat$Irrigated[rpn.dat$Location%in%irrigated] <- TRUE

rpn.dat$Location <- as.factor(as.character(rpn.dat$Location))
levels(rpn.dat$Location)

rpndry.dat <- subset(rpn.dat, !rpn.dat$Irrigated)

rpndry.dat$Location <- as.factor(as.character(rpndry.dat$Location))
levels(rpndry.dat$Location)

yield.gap3.plot <- ggplot(rpndry.dat, aes(Value,Actual),xlab="Nursery Average",ylab="County Average")
yield.gap3.plot <- yield.gap3.plot + geom_point(aes(color=Year)) + geom_smooth(aes(group= Year,color=Year),se = FALSE,method="lm")
yield.gap3.plot

gap.frame <- data.frame(
  Year =  c(rpndry.dat$Cycle,rpndry.dat$Cycle),
  Source = c(rep("Nursery",length(rpndry.dat$Value)),rep("County",length(rpndry.dat$Value))),
  Yield = c(rpndry.dat$Value,rpndry.dat$Actual)
)
gap.frame$Source <- as.factor(gap.frame$Source)
@

<<fig=TRUE>>=
yield.gap4.plot <- ggplot(gap.frame, aes(Year,Yield))
#yield.gap2.plot <- yield.gap2.plot + geom_point(aes(color=Source)) + geom_smooth(aes(group=Source,color=Source),se = FALSE,method="lm")
yield.gap4.plot <- yield.gap4.plot + geom_point(aes(color=Source)) + geom_smooth(aes(group=Source,color=Source),se = FALSE,method="lm")
yield.gap4.plot
@

<<fig=TRUE>>=
yield.gap3a.plot <- ggplot(rpndry.dat, aes(Value,Actual),xlab="Nursery Average",ylab="County Average")
yield.gap3a.plot <- yield.gap3a.plot + geom_point(aes(color=Trial)) + geom_smooth(aes(group= Trial,color=Trial),se = FALSE,method="lm")
yield.gap3a.plot
@


Plot the actual gap by year

<<>>=
rpndry.dat <- subset(rpndry.dat,rpndry.dat$Count>10)
summary(lm(Gap ~ Location + Cycle, data=rpndry.dat, model=FALSE))
summary(lm(GapPercent ~ Location + Cycle, data=rpndry.dat, model=FALSE))

summary(lm(Gap ~ Trial + Cycle, data=rpndry.dat, model=FALSE))
summary(lm(GapPercent ~ Trial + Cycle, data=rpndry.dat, model=FALSE))
@

<<fig=TRUE>>=
yield.gap5.plot <- ggplot(rpndry.dat, aes(Cycle,Gap),xlab="Year",ylab="Gap")
yield.gap5.plot <- yield.gap5.plot + geom_point(aes(color=Location)) + geom_smooth(aes(group= Location,color=Location),se = FALSE,method="lm")
yield.gap5.plot
@

<<fig=TRUE>>=
yield.gap6.plot <- ggplot(rpndry.dat, aes(Cycle,GapPercent),xlab="Year",ylab="Gap Percent")
yield.gap6.plot <- yield.gap6.plot + geom_point(aes(color=Location)) + geom_smooth(aes(group= Location,color=Location),se = FALSE,method="lm")
yield.gap6.plot
@

<<fig=TRUE>>=
yield.gap6b.plot <- ggplot(rpndry.dat, aes(Cycle,GapPercent),xlab="Year",ylab="Gap Percent")
yield.gap6b.plot <- yield.gap6b.plot + geom_point(aes(color=Trial)) + geom_smooth(aes(group=Trial,color=Trial),se = FALSE,method="lm")
yield.gap6b.plot
@

<<>>=
gap.lm <- lm(Gap ~ 0 + Location + Location:Cycle, data=rpndry.dat, model=FALSE)
gapper.lm <- lm(GapPercent ~ 0 + Location + Location:Cycle, data=rpndry.dat, model=FALSE)
summary(gap.lm)
summary(gapper.lm)
@

Get the coefficients so we can map regression estimates
<<>>=
labels <- attr(gap.lm$terms, "term.labels")
rpn.estimates <- gap.lm$coefficients[gap.lm$assign == 1]
rpn.year.estimates <- gap.lm$coefficients[gap.lm$assign == 2]
length(rpn.estimates)
length(rpn.year.estimates)
names(rpn.estimates) <- gap.lm$xlevels[[1]]
names(rpn.year.estimates) <- gap.lm$xlevels[[1]]
locations.dat$gapintercept <- rpn.estimates[as.character(locations.dat$Name)]
locations.dat$gapslope <- rpn.year.estimates[as.character(locations.dat$Name)]
locations.dat$gapintercept <- locations.dat$gapintercept + locations.dat$gapslope*1999
@

<<fig=TRUE>>=
gapplot.dat <- subset(locations.dat, !is.na(locations.dat$gapslope))
ggmap.full.values(locations.dat$gapslope,locations.dat$statecounty,main="gap slope",legend="slope")
@

<<>>=
labels <- attr(gapper.lm$terms, "term.labels")
rpn.per.estimates <- gapper.lm$coefficients[gapper.lm$assign == 1]
rpn.per.year.estimates <- gapper.lm$coefficients[gapper.lm$assign == 2]

names(rpn.per.estimates) <- gapper.lm$xlevels[[1]]
names(rpn.per.year.estimates) <- gapper.lm$xlevels[[1]]
locations.dat$gapperintercept <- rpn.per.estimates[as.character(locations.dat$Name)]
locations.dat$gapperslope <- rpn.per.year.estimates[as.character(locations.dat$Name)]
locations.dat$gapperintercept <- locations.dat$gapperintercept + locations.dat$gapperslope*1999
@

<<fig=TRUE>>=
gapplot.dat <- subset(locations.dat, !is.na(locations.dat$gapslope))
ggmap.full.values(locations.dat$gapslope,locations.dat$statecounty,main="gap slope",legend="slope")
@

<<fig=TRUE>>=
ggmap.full.values(locations.dat$gapintercept,locations.dat$statecounty,main="gap mean",legend="mean")
@

<<fig=TRUE>>=
ggmap.full.values(locations.dat$gapperintercept,locations.dat$statecounty,main="gap percent",legend="precent")
@

<<fig=TRUE>>=
yield.rpn.lm <- lm(Value ~ 0 + statecounty + statecounty:Cycle, data=rpndry.dat, model=FALSE, qr=FALSE)
yield.rpn.a <- extract.county.estimates(yield.rpn.lm,term=1)
yield.rpn.b <- extract.county.estimates(yield.rpn.lm,term=2)
yield.rpn.a <- yield.rpn.a + yield.rpn.b*1999
nursery.dat <- data.frame(
   statecounty=names(yield.rpn.a),
   yield.a=yield.rpn.a,
   yield.b=yield.rpn.b)
ggmap.full.values(yield.rpn.a,names(yield.rpn.a),main="Yield Average, RPN",legend="slope")

@

<<rpn,fig=TRUE,height=4.5>>=
ggmap.full.values(yield.rpn.b,names(yield.rpn.b),main="M. Yield Change, HWW RP Trials",legend="%/yr",palette=yield.palette) + theme_bw()
@
Now, determine distance to test locations

<<>>=
library(maptools)
library(spdep)

nursery.map <- map("county", regions = locations.dat$statecounty, fill = TRUE, plot=FALSE)
#nursery.map <- map("county", regions = rpndry.dat$statecounty, fill = TRUE, plot=FALSE)
nursery.names <- as.character(nursery.map$names)
nursery.poly <- map2SpatialPolygons(nursery.map, nursery.map$names)
nursery.coords <- coordinates(nursery.poly)

nursery.dat$Latitude <- NA
nursery.dat$Longitude <- NA
nursery.dat$coordname <- NA
coordnames <- rownames(nursery.coords)
for(idx in coordnames) {
   mask <- idx == nursery.dat$statecounty
   nursery.dat$Longitude[mask] <- nursery.coords[idx,1]
   nursery.dat$Latitude[mask] <- nursery.coords[idx,2]
   nursery.dat$coordname[mask] <- idx
}

covariates.map <- map("county", regions = full.covariates.dat$statecounty, fill = TRUE, plot=FALSE)
covariates.poly <- map2SpatialPolygons(covariates.map, covariates.map$names)
covariates.coords <- coordinates(covariates.poly)


full.covariates.dat$Latitude <- NA
full.covariates.dat$Longitude <- NA
full.covariates.dat$coordname <- NA
coordnames <- rownames(covariates.coords)
for(idx in coordnames) {
   mask <- idx == full.covariates.dat$statecounty
   full.covariates.dat$Longitude[mask] <- covariates.coords[idx,1]
   full.covariates.dat$Latitude[mask] <- covariates.coords[idx,2]
   full.covariates.dat$coordname[mask] <- idx
}

full.covariates.dat$statecounty[full.covariates.dat$statecounty!=full.covariates.dat$coordname]
full.covariates.dat$coordname[full.covariates.dat$statecounty!=full.covariates.dat$coordname]

@

Check our coordinates
<<fig=TRUE>>=
par(mfrow=c(1,3))
plot(full.covariates.dat$Longitude,full.covariates.dat$Latitude)
points(nursery.coords[,1],nursery.coords[,2],col="blue",pch=19)
plot(nursery.coords[,1],nursery.coords[,2],col="blue",pch=19)
par(mfrow=c(1,1))
@

Spatial autocorrelation

<<fig=TRUE>>=
covariates.nb <- poly2nb(covariates.poly)
covariates.wt <- nb2listw(covariates.nb,zero.policy=TRUE)
moran.values <- rep(NA,length(full.covariates.dat$yield.b))
actual.values <- full.covariates.dat$yield.b
names(actual.values) <- as.character(full.covariates.dat$statecounty)

moran.values <- actual.values[covariates.map$names]
names(moran.values) <- covariates.map$names

moran.test(moran.values,covariates.wt,na.action=na.exclude,zero.policy=TRUE)

recent.moran <- localmoran(moran.values,covariates.wt,na.action=na.exclude,zero.policy=TRUE)
#recent.G <- localG(moran.values,covariates.wt,na.action=na.exclude,zero.policy=TRUE)
moranI <- recent.moran[,1]
moranP <- recent.moran[,5]
names(moranI) <- names(moran.values)
names(moranP) <- names(moran.values)
full.covariates.dat$I <- moranI[as.character(full.covariates.dat$statecounty)]
full.covariates.dat$pI <- moranP[as.character(full.covariates.dat$statecounty)]
ggmap.full.values(full.covariates.dat$I,full.covariates.dat$statecounty,main="Local Autocorrelation",legend="Moran's I",palette=cbPalette[1:2])
ggmap.full.values(1-full.covariates.dat$pI,full.covariates.dat$statecounty,main="Local Autocorrelation",legend="p Moran's I",palette=cbPalette[1:2])
@

Compute distances
<<>>=
full.covariates.dat$NearestStation <- NA
full.covariates.dat$Distance <- NA
full.covariates.dat$DistanceGPS <- NA
for(i in 1:dim(full.covariates.dat)[1]) {
   if(!is.na(full.covariates.dat$Longitude[i])) {
      current.coord <- c(full.covariates.dat$Longitude[i],full.covariates.dat$Latitude[i])
      nearest.idx <- 1
      site.coord.gps <- c(nursery.dat$Longitude[1],nursery.dat$Latitude[1])
      site.coord <- c(nursery.coords[1,1],nursery.coords[1,2])
      min.distance <- sqrt(sum((current.coord-site.coord)^2))
      min.distance.gps <- sqrt(sum((current.coord-site.coord.gps)^2))

      for(j in 2:dim(nursery.coords)[1]) {
      #for(j in 2:length(counties)) {
         site.coord.gps <- c(nursery.dat$Longitude[j],nursery.dat$Latitude[j])
         site.coord <- c(nursery.coords[j,1],nursery.coords[j,2])
         current.distance <- sqrt(sum((current.coord-site.coord)^2))
         current.distance.gps <- sqrt(sum((current.coord-site.coord.gps)^2))
         if(current.distance<min.distance) {
            min.distance <- current.distance
            nearest.idx <- j
         }
         if(!is.na(current.distance.gps)) {
            if(current.distance.gps<min.distance.gps) {
               min.distance.gps <- current.distance.gps
               nearest.idx <- j
            } 
         }
      }
      full.covariates.dat$NearestStation[i] = nursery.dat$statecounty[nearest.idx]
      full.covariates.dat$Distance[i] <-  min.distance
      full.covariates.dat$DistanceGPS[i] <-  min.distance.gps
   }
}
@

<<fig=TRUE>>=
distance.a.plot <- ggplot(full.covariates.dat, aes(Distance,yield.a)) + 
geom_point(aes(color=state)) + geom_smooth(aes(group=state,color=state),method="lm",se = FALSE)
distance.a.plot
@
<<fig=TRUE>>=
distance.b.plot <- ggplot(full.covariates.dat, aes(Distance,yield.b)) + 
geom_point(aes(color=state)) + geom_smooth(aes(group=state,color=state),method="lm",se = FALSE)
distance.b.plot
setwd(local.wd)
@

<<fig=TRUE>>=
ggmap.full.values(full.covariates.dat$Distance,full.covariates.dat$statecounty,main="Distance to RPN Station",legend="Distance",palette=cbPalette[5:6])
@

<<fig=TRUE>>=
plot(full.covariates.dat$Distance,full.covariates.dat$DistanceGPS)
@

\end{document}