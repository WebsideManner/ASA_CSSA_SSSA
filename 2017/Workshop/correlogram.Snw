\documentclass{report}
\usepackage{amsmath}
\usepackage[]{algorithm2e}

\begin{document}

\title{Correlograms}
\author{Peter Claussen}\maketitle

<<echo=false>>=
library(MASS)
library(moments)
library(ggplot2)
library(gridExtra)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#F0E442", "#CC79A7","#000000")
@

<<>>=
load(file="autocorrelation.Rda")
load(file="sample.dat.Rda")

sample.dat$Seconds <- sample.dat$Seconds -  min(sample.dat$Seconds)+1

attach(autocorrelation.dat)
@
<<>>=
initwd <- getwd() 
setwd("./working")
@



<<>>=
library(nlme)
@

<<>>=
sample.pass14.dat <- sample.dat[sample.dat$PassNum==14,]
sample.pass15.dat <- sample.dat[sample.dat$PassNum==15,]
sample.pass16.dat <- sample.dat[sample.dat$PassNum==16,]
@


<<>>=
auto.correlation <- function(univariate,k=1) {
  x.bar <- mean(univariate)
  ss <- sum((univariate-x.bar)^2)
  n <- length(univariate)
  lag.ss <- sum((univariate[(1+k):n]-x.bar)*(univariate[1:(n-k)]-x.bar))
  return(lag.ss/ss)
}
@


<<>>=
auto.correlation(white.noise,k=1)
auto.correlation(white.noise,k=2)
auto.correlation(white.noise,k=3)
@

We expect small $r_k$ for all $k$, since white noise values should be independent.

<<>>=
auto.correlation(autoregressive,k=1)
auto.correlation(autoregressive,k=2)
auto.correlation(autoregressive,k=3)
@
With simple autoregression, we see correlation coefficient approximating $\alpha$ at $k=1$
and decreasing as we increase the gap $k$ between values.


We might want to visualize how autocorrelation changes with lag; this will help us understand the process that creates a sequence of values. 

<<autocorrelation,fig=TRUE,width=8,height=3>>=
autoregressive.r <- rep(0,20)
for(i in 1:20) {
  autoregressive.r[i] <- auto.correlation(autoregressive,k=i)
}
plot(1:20,autoregressive.r)
@


<<AutoregressivePlot,fig=TRUE,width=8,height=3>>=
autoregressive.acf = acf(autoregressive,lag.max=50)
plot(autoregressive.acf$lag,autoregressive.acf$acf)
@

<<AutoregressiveACF,fig=TRUE,width=8,height=3>>=
plot(autoregressive.acf)
@


<<WhiteNoiseACF,fig=TRUE,width=8,height=3>>=
white.noise.acf = acf(white.noise,lag.max=50)
plot(white.noise.acf$lag,white.noise.acf$acf)
@

<<RandomWalkACF,fig=TRUE,width=8,height=3>>=
random.walk.acf = acf(random.walk,lag.max=50)
plot(random.walk.acf$lag,random.walk.acf$acf)
@

<<MovingAverageACF,fig=TRUE,width=8,height=3>>=
moving.average.acf = acf(moving.average,lag.max=50)
plot(moving.average.acf$lag,moving.average.acf$acf)
@

<<TrendErrorACF,fig=TRUE,width=8,height=3>>=
trend.error.acf = acf(trend.error,lag.max=50)
plot(trend.error.acf$lag,trend.error.acf$acf)
@



We'll consider autocorrelation by observation within a single pass.

<<Yield14,fig=TRUE,width=8,height=3>>=
plot(sample.pass14.dat$Yield)
@

<<Yield14ACF,fig=TRUE,width=8,height=3>>=
yield14.acf = acf(sample.pass14.dat$Yield,lag.max=50)
@

<<Yield15ACF,fig=TRUE,width=8,height=3>>=
yield15.acf = acf(sample.pass15.dat$Yield,lag.max=50)
@

<<Yield16ACF,fig=TRUE,width=8,height=3>>=
yield16.acf = acf(sample.pass16.dat$Yield,lag.max=50)
@


<<Yield14,fig=TRUE,width=8,height=3>>=
ggplot(sample.pass14.dat, aes(Seconds, Yield)) + 
  geom_point(color=cbPalette[2],size = 2) + 
  geom_line(color=cbPalette[1]) +
  labs(colour = "Yield", x="Seconds", y="bu/acre")
@

<<Yield15,fig=TRUE,width=8,height=3>>=
ggplot(sample.pass15.dat, aes(Seconds, Yield)) + 
  geom_point(color=cbPalette[2],size = 2) + 
  geom_line(color=cbPalette[1]) +
  labs(colour = "Yield", x="Seconds", y="bu/acre")
@

<<Yield16,fig=TRUE,width=8,height=3>>=
ggplot(sample.pass16.dat, aes(Seconds, Yield)) + 
  geom_point(color=cbPalette[2],size = 2) + 
  geom_line(color=cbPalette[1]) +
  labs(colour = "Yield", x="Seconds", y="bu/acre")
@


<<Distance14ACF,fig=TRUE,width=8,height=3>>=
distance14.acf = acf(sample.pass14.dat$Distance,lag.max=50)
@

<<Moisture14ACF,fig=TRUE,width=8,height=3>>=
moisture14.acf = acf(sample.pass14.dat$Moisture,lag.max=50)
@

<<Heading14ACF,fig=TRUE,width=8,height=3>>=
heading14.acf = acf(sample.pass14.dat$Heading,lag.max=50)
@


<<>>=
semivariance <- function(univariate,k=1) {
  n <- length(univariate)
  lag.ss <- sum((univariate[(1+k):n]-univariate[1:(n-k)])^2)
  return(lag.ss/(2*(n-k)))
}
@

<<AutogregressiveFunction,fig=TRUE,width=8,height=3>>=
autoregressive.g <- rep(0,20)
moving.average.g <- rep(0,20)
white.noise.g <- rep(0,20)
for(i in 1:20) {
  autoregressive.g[i] <- semivariance(autoregressive,k=i)
  moving.average.g[i] <- semivariance(moving.average,k=i)
  white.noise.g[i] <- semivariance(white.noise,k=i)
}
plot(1:20,autoregressive.g,ylim=c(0,4),xlab="Index",ylab="Semivariance")
@

<<AutoregressiveVariogram,fig=TRUE,width=5,height=3>>=
auto.dat <- data.frame(
  autoregressive.g=autoregressive.g,
  moving.average.g=moving.average.g,
  white.noise.g=white.noise.g,
  index=1:20
  )
exp.fun <- function(h) {
  s<-2
  r <- 9
  n <- 0.2
  return(n+(s-n)*(1-exp(-h/(r*(1/3)))))
}
ggplot(auto.dat,aes(x=index,y=autoregressive.g)) + 
  geom_point() + 
  stat_function(fun = exp.fun) + 
  ylim(0, 2.2) +
  labs(x="Index", y="Semivariance")
@

<<WhiteNoiseVariogram,fig=TRUE,width=5,height=3>>=
exp.fun <- function(h) {
  s<-2
  r <- 9
  n <- 0.2
  return(n+(s-n)*(1-exp(-h/(r*(1/3)))))
}
ggplot(auto.dat,aes(x=index,y=white.noise.g)) + 
  geom_point() + 
  #stat_function(fun = exp.fun) + 
  ylim(0, 2.2) +
  labs(x="Index", y="Semivariance")
@


<<MovingAverageVariogram,fig=TRUE,width=5,height=3>>=
exp.fun <- function(h) {
  s<-2
  r <- 9
  n <- 0.2
  return(n+(s-n)*(1-exp(-h/(r*(1/3)))))
}
ggplot(auto.dat,aes(x=index,y=moving.average.g)) + 
  geom_point() + 
  #stat_function(fun = exp.fun) + 
  ylim(0, 2.2) +
  labs(x="Index", y="Semivariance")
@

This is an example of a variogram, which we'll consider in more detail when we move to two dimensional analysis.

<<>>=
setwd(initwd)
@

\end{document}

