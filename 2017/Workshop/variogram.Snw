\documentclass{report}
\usepackage{amsmath}
\usepackage[]{algorithm2e}

\begin{document}

\title{Spatial Variogram}
\author{Peter Claussen}\maketitle


<<>>=
library(gstat)
library(geoR)
@

Note : on my system (Mac OS) I've had problems with the geoR dependencies, specifically `tcltk`. You might need to install an XWindows system (XQuartz https://www.xquartz.org) or `tcltk` (http://cran.us.r-project.org/bin/macosx/tools/ ) directly. This is a Unix-based GUI that `geoR` uses for interactive analysis.

If you're running a Windows version you should't have a problem running this package.

### ggplot2 : A system for 'declaratively' creating graphics, based on "The Grammar of Graphics"

<<>>=
library(ggplot2)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#F0E442","#CC79A7","#000000","#734f80", "#2b5a74", "#004f39", "#787221", "#003959", "#6aaf00", "#663cd3")
@

# Data

<<>>=
load(file="sample.dat.Rda")
sample.dat$Seconds <- sample.dat$Seconds -min(sample.dat$Seconds)+1
@

<<>>=
initwd <- getwd() 
setwd("./working")
@

<<YieldPlot,fig=TRUE,width=5,height=5>>=
ggplot(sample.dat, aes(LonM, LatM)) + 
geom_point(aes(colour = Yield),size=3) + 
scale_colour_gradient(low=cbPalette[7], high=cbPalette[4]) +
labs(colour = "Yield (bu/acre)", x="Longitude (m)", y="Latitude (m)", title = "Sample Yield Monitor Data")
@

<<YieldGstat,fig=TRUE,width=6,height=4>>=
Yield.var <- variogram(Yield~1, 
                        locations=~LonM+LatM, 
                        data=sample.dat)
plot(Yield.var)
@


Yield.temp.var <- variogram(Yield~1, 
                        locations=~Seconds, 
                        data=sample.dat)
plot(Yield.temp.var)


@
vgm(psill = NA, model, range = NA, nugget, add.to, anis, kappa = 0.5, ..., covtable,
	Err = 0)
@

By inspection of the plot, we might guess a a nugget of 50, a sill of 200, and a range of 40m, so 
<<>>=
print(Yield.vgm <- fit.variogram(Yield.var, vgm(psill=150,model="Sph",range=40,nugget=50)))
print(Yield.Exp.vgm <- fit.variogram(Yield.var, vgm(psill=200,"Exp",range=40,nugget=50)))
print(Yield.Gau.vgm <- fit.variogram(Yield.var, vgm(psill=200,"Gau",range=40,nugget=50)))
print(Yield.Mat.vgm <- fit.variogram(Yield.var, vgm(psill=200,"Mat",range=40,nugget=50)))
@



<<YieldGstatSphDefault,fig=TRUE,width=5,height=4>>=
plot(Yield.var, model=fit.variogram(Yield.var, vgm(model="Sph")),main="Spherical, No Nugget")
@

<<YieldGstatSph,fig=TRUE,width=5,height=4>>=
plot(Yield.var, model=Yield.vgm,main="Spherical")
@

> fit.variogram(Yield.var, vgm(model="Sph"))
  model    psill   range
1   Sph 170.4116 10.6658
> fit.variogram(Yield.var, vgm(model="Sph",psill=200,range=40,nugget=50))
  model     psill    range
1   Nug  64.12461  0.00000
2   Sph 126.97065 30.91816


<<YieldGGplotVar,fig=TRUE,width=5,height=4>>=
sph.fun <- function(h) {
  s<-Yield.vgm$psill[2]
  r <- Yield.vgm$range[2]
  n <- Yield.vgm$psill[1]
  if(h<=range) {
    return(sill*(1.5*(h/range) -0.5*(h/range)^3))
  } else {
    return(sill)
  }
}
exp.fun <- function(h) {
  s<-Yield.vgm$psill[2]
  r <- Yield.vgm$range[2]
  n <- Yield.vgm$psill[1]
  return(n+(s)*(1-exp(-h/(r*(1/3)))))
}
ggplot(Yield.var,aes(x=dist,y=gamma,size=np)) + geom_point() +
stat_function(fun = exp.fun)
@

<<YieldGstatGau,fig=TRUE,width=5,height=4>>=
plot(Yield.var, model=Yield.Gau.vgm,main="Gaussian")
@
<<YieldGstatExp,fig=TRUE,width=5,height=4>>=
plot(Yield.var, model=Yield.Exp.vgm,main="Exponential")
@

Similarly, for the other variables

<<DistanceGstatSph,fig=TRUE,width=6,height=4>>=
Distance.var <- variogram(Distance~1, 
                        locations=~LonM+LatM, 
                        data=sample.dat)
print(Distance.vgm <- fit.variogram(Distance.var, vgm(0.06,"Sph",20,.02)))
plot(Distance.var, model=Distance.vgm)
@

<<MoistureGstatSph,fig=TRUE,width=6,height=4>>=
Moisture.var <- variogram(Moisture~1, 
                        locations=~LonM+LatM, 
                        data=sample.dat)
print(Moisture.vgm <- fit.variogram(Moisture.var, vgm(0.25,"Sph",20,0.1)))
plot(Moisture.var, model=Moisture.vgm)
@

<<HeadingGstatSph,fig=TRUE,width=6,height=4>>=
Heading.var <- variogram(Heading~1, 
                        locations=~LonM+LatM, 
                        data=sample.dat)
print(Heading.vgm <- fit.variogram(Heading.var, vgm(1000,"Sph",20,500)))
plot(Heading.var, model=Heading.vgm)
@

It's worth noting that a variogram can be influence by how points are collected into lag groups. To examine a point-by-point correlation, we can produce a variogram cloud

<<VCloud,fig=TRUE,width=6,height=4>>=
Yield.cloud.var <- variogram(Yield~1, 
                        locations=~LonM+LatM, 
                        data=sample.dat[1:1000,],
                       cloud=T)
plot(Yield.cloud.var,model=Yield.vgm)
@

## geoR

`geoR` requires geodata classes. Otherwise, the process is similar. However, specifying a geodata object can be cumbersome, and fitting variograms is less intuitive.

<<>>=
metric.col <- c(which(names(sample.dat)=="LatM"), which(names(sample.dat)=="LonM"))
coords.col <- c(which(names(sample.dat)=="Latitude"), which(names(sample.dat)=="Longitude"))
data.col = c(which(names(sample.dat)=="Yield"),which(names(sample.dat)=="Distance"),which(names(sample.dat)=="Moisture"))
sample.gdat <- as.geodata(sample.dat, coords.col = metric.col, data.col = data.col)
str(sample.gdat)
@

<<YieldGeoR,fig=TRUE,width=5,height=5>>=
Yield.gvar <- variog(sample.gdat,data=sample.gdat$data[,1])
plot(Yield.gvar)
@

variofit seems to work better if we give it a range of initial values, so we create a grid of values:
<<>>=
init.cov <- expand.grid(seq(10,200,l=10), seq(0,40,l=5))
@


<<>>=
print(Yield.fit <- variofit(Yield.gvar, cov.model="spherical", 
                       ini.cov.pars=init.cov,
                       fix.nugget=FALSE, nugget=50))
print(Yield.exp.fit <- variofit(Yield.gvar, cov.model="exponential", 
                       ini.cov.pars=init.cov,
                       fix.nugget=FALSE, nugget=50))
print(Yield.gau.fit <- variofit(Yield.gvar, cov.model="gaussian", 
                       ini.cov.pars=init.cov,
                       fix.nugget=FALSE, nugget=50))
@

It also takes an extra step to add the fitted variogram.

<<YieldGeoRFitVgam,fig=TRUE,width=5,height=5>>=
plot(Yield.gvar)
lines(Yield.fit,col="black")
lines(Yield.gau.fit,col="red")
lines(Yield.exp.fit,col="blue")
@

This function does produce a barplot for the variogram cloud. It does become noisy with the full data set, so we will illustrate with a subset.

<<YieldVCloud,fig=TRUE,width=5,height=5>>=
subsample.gdat <- as.geodata(sample.dat[1:1000,], coords.col = metric.col, data.col = data.col)
Yield.cloud.gvar <- variog(subsample.gdat,data=subsample.gdat$data[,1],bin.cloud=TRUE)
plot(Yield.cloud.gvar,bin.cloud=TRUE)
@

Sometimes it's easier to work with a one-shot data frame:

<<MoistureGvar,fig=TRUE,width=5,height=5>>=
Moisture.idx = which(names(sample.dat)=="Moisture")
Moisture.gdat <- as.geodata(sample.dat, coords.col = metric.col, data.col = Moisture.idx)
Moisture.gvar <- variog(Moisture.gdat)
plot(Moisture.gvar)
@



# Isotropy

Isotropy implies that spatial correlation depends only on distance and not on direction. One way to determine if a set of spatial data a anisotropic is to compute variograms at different angles. 

We can do this manually from `gstat` by

<<>>=
Yield.ani.var <- variogram(Yield~1, 
                        locations=~LonM+LatM, 
                        data=sample.dat, alpha=c(0,45,90,135))
print(Yield.ani.vgm <- fit.variogram(Yield.ani.var, vgm(psill=120,"Sph",range=40,nugget=50, anis = c(0, 0.5))))
@

<<YieldAniVgam,fig=TRUE,width=5,height=5>>=
plot(Yield.ani.var,model=Yield.vgm)
@

or we can use the `vario4` function from `geoR`:

<<YieldVario4,fig=TRUE,width=5,height=5>>=
Yield.idx = which(names(sample.dat)=="Yield")
Yield.gdat <- as.geodata(sample.dat, coords.col = metric.col, data.col = Yield.idx)
Yield.var4 <- variog4(Yield.gdat,max.dsist=200)
plot(Yield.var4, omnidirectional=TRUE)
@


We can see if this holds true for other variables as well.

<<DistanceAniVgm,fig=TRUE,width=5,height=5>>=
Distance.ani.vgm <- variogram(Distance~1, 
                        locations=~LonM+LatM, 
                        data=sample.dat, alpha=c(0,45,90,135))
plot(Distance.ani.vgm, Distance.vgm)
@

<<DistanceVario4,fig=TRUE,width=5,height=5>>=
Distance.idx = which(names(sample.dat)=="Distance")
Distance.gdat <- as.geodata(sample.dat, coords.col = metric.col, data.col = Distance.idx)
Distance.var4 <- variog4(Distance.gdat,max.dist=200)
plot(Distance.var4)
@

<<Distance,fig=TRUE,width=5,height=5>>=
ggplot(sample.dat, aes(LonM, LatM)) + 
geom_point(aes(colour = Distance),size=3) + 
scale_colour_gradient(low=cbPalette[7], high=cbPalette[5]) +
labs(colour = "Distance", x="Longitude (m)", y="Latitude (m)", title = "Sample Yield Monitor Data")
@


<<MoistureAniVgm,fig=TRUE,width=5,height=5>>=
Moisture.ani.vgm <- variogram(Moisture~1, 
                        locations=~LonM+LatM, 
                        data=sample.dat, alpha=c(0,45,90,135))
plot(Moisture.ani.vgm,model=Moisture.vgm)
@

<<MoistureVario4,fig=TRUE,width=5,height=5>>=
Moisture.var4 <- variog4(Moisture.gdat,max.dist=200)
plot(Moisture.var4)
@


<<Moisture,fig=TRUE,width=5,height=5>>=
ggplot(sample.dat, aes(LonM, LatM)) + 
geom_point(aes(colour = Moisture),size=3) + 
scale_colour_gradient(low=cbPalette[7], high=cbPalette[5]) +
labs(colour = "Moisture", x="Longitude (m)", y="Latitude (m)", title = "Sample Yield Monitor Data")
@


<<HeadingAniVgm,fig=TRUE,width=5,height=5>>=
Heading.ani.vgm <- variogram(Heading~1, 
                        locations=~LonM+LatM, 
                        data=sample.dat, alpha=c(0,45,90,135))
plot(Heading.ani.vgm,Heading.vgm)
@


<<Heading,fig=TRUE,width=5,height=5>>=
ggplot(sample.dat, aes(LonM, LatM)) + 
geom_point(aes(colour = Heading),size=3) + 
scale_colour_gradient(low=cbPalette[7], high=cbPalette[5]) +
labs(colour = "Heading.", x="Longitude (m)", y="Latitude (m)", title = "Sample Yield Monitor Data")
@

<<>>=
Yield.map.var <- variogram(Yield~1, 
                        locations=~LonM+LatM, 
                        data=sample.dat, map=TRUE,cutoff=50,width=5)
@

<<YieldMapVgam,fig=TRUE,width=5,height=5>>=
plot(Yield.map.var)
@

expvar <- variogram(g,width=3,cutoff=30,map=TRUE)
which can be plotted again by a gstat function:
plot(expvar)

<<>>=
setwd(initwd)
@

\end{document}