\documentclass{report}
\usepackage{amsmath}

\begin{document}
\SweaveOpts{concordance=TRUE}

\title{Adaptive Randomization}
\maketitle

<<>>=
options(digits=12)
trace <- function(x) {sum(diag(x))}
library(ggplot2)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#F0E442","#CC79A7","#000000","#734f80", "#2b5a74", "#004f39", "#787221", "#003959", "#6aaf00", "#663cd3")
@

<<Datasets,echo=false>>=
arm.dat <- data.frame(
plot=as.factor(c(102, 201, 302, 401, 502, 601, 101, 202, 301, 402, 501, 602)), 
treatment=as.factor(c(1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2)), 
replicate=as.factor(c(1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6)),
assessment2=c(26.60, 31.10, 34.70, 34.40, 32.10, 28.50, 30.20, 29.20, 32.10, 31.90, 30.20, 31.00), 
assessment1=c(0.91, 1.22, 1.43, 1.45, 1.33, 1.10, 1.02, 0.89, 1.39, 1.47, 1.27, 1.12)
)

milliken10.2.arm.dat <- data.frame(
plot=as.factor(c(101, 202, 303, 404, 501, 605, 703, 804, 902, 1004, 1105, 1203, 105, 201, 305, 401, 505, 603, 701, 803, 905, 1002, 1104, 1201, 104, 203, 304, 405, 502, 604, 705, 801, 903, 1001, 1103, 1202, 102, 205, 302, 403, 504, 602, 704, 802, 901, 1003, 1102, 1205, 103, 204, 301, 402, 503, 601, 702, 805, 904, 1005, 1101, 1204)), 
treatment=as.factor(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)), 
replicate=as.factor(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)),
assessment2=c(55.10, 50.70, 58.40, 60.50, 60.60, 60.40, 62.10, 59.50, 68.10, 66.70, 68.70, 64.90, 59.60, 59.10, 65.50, 57.90, 65.60, 64.80, 64.70, 64.00, 64.90, 75.90, 68.50, 63.60, 63.50, 65.70, 66.10, 72.70, 70.60, 62.40, 66.00, 76.10, 80.50, 82.80, 75.30, 75.50, 66.10, 59.90, 77.80, 73.50,
91.10, 69.70, 76.20, 78.30, 79.80, 84.00, 87.80, 80.20, 80.50, 78.60, 76.40, 78.70, 82.20, 67.00, 86.80, 81.20, 96.40, 79.00, 76.10, 88.50), 
assessment1=c(14.00, 15.40, 13.50, 19.00, 12.00, 24.10, 28.90, 18.70, 25.60, 22.70, 25.30, 22.60, 11.40, 20.60, 21.20, 9.00, 16.90, 21.30, 23.60, 16.00, 13.20, 28.50, 14.80, 11.10, 14.40, 20.30, 15.60, 20.80, 16.50, 14.20, 17.80, 24.80, 27.20, 28.50, 19.20, 18.40, 12.20, 11.90, 21.60, 17.00,
31.40, 16.20, 22.90, 19.10, 19.40, 22.40, 26.10, 19.80, 21.10, 24.30, 16.10, 17.50, 19.00, 12.50, 26.90, 19.80, 28.60, 16.70, 14.90, 22.40)
)

cochran.arm.dat <- data.frame(
plot=as.factor(c(301, 603, 702, 1101, 304, 601, 902, 1203, 103, 604, 904, 1103, 101, 404, 804, 1201, 204, 402, 903, 1102, 202, 502, 704, 1003, 303, 401, 801, 1004, 203, 503, 701, 1202, 104, 501, 803, 1104, 102, 403, 703, 1204, 302, 504, 802, 1001, 201, 602, 901, 1002)), 
treatment=as.factor(c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12)), 
replicate=as.factor(c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)), 
block=as.factor(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 
column=as.factor(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 
y=c(3, 3, 4, 5, 3, 3, 6, 6, 1, 3, 6, 5, 1, 1, 5, 6, 2, 1, 6, 5, 2, 2, 4, 4, 3, 1, 5, 4, 2, 2, 4, 6, 1, 2, 5, 5, 1, 1, 4, 6, 3, 2, 5, 4, 2, 3, 6, 4), 
x=c(1, 7, 2, 5, 4, 5, 2, 7, 3, 8, 4, 7, 1, 8, 4, 5, 4, 6, 3, 6, 2, 6, 4, 7, 3, 5, 1, 8, 3, 7, 1, 6, 4, 5, 3, 8, 2, 7, 3, 8, 2, 8, 2, 5, 1, 6, 1, 6), 
lat=c(17, 17, 24, 31, 17, 17, 38, 38, 3, 17, 38, 31, 3, 3, 31, 38, 10, 3, 38, 31, 10, 10, 24, 24, 17, 3, 31, 24, 10, 10, 24, 38, 3, 10, 31, 31, 3, 3, 24, 38, 17, 10,
31, 24, 10, 17, 38, 24), 
lon=c(2, 29, 6.5, 20, 15.5, 20, 6.5, 29, 11, 33.5, 15.5, 29, 2, 33.5, 15.5, 20, 15.5, 24.5, 11, 24.5, 6.5, 24.5, 15.5, 29, 11, 20, 2, 33.5, 11, 29, 2, 24.5, 15.5, 20, 11, 33.5, 6.5, 29, 11, 33.5, 6.5, 33.5,
6.5, 20, 2, 24.5, 2, 24.5), 
assessment2=c(268, 132, 256, 236, 408, 292, 280, 142, 415, 454, 386, 176, 365, 298, 379, 199, 222, 114, 398, 332, 561, 92, 304, 308, 433, 80, 194, 221, 311, 28, 372, 166, 338, 254, 421, 137, 563,
268, 708, 590, 505, 106, 219, 356, 363, 352, 466, 212), 
assessment1=c(124, 109, 230, 107, 222, 193, 283, 80, 107, 153, 212, 41, 162, 48, 263, 95, 42, 19, 252, 89, 193, 9, 145, 42, 194, 23, 138, 62, 128, 17, 282, 127, 67, 29, 197, 74, 191, 44,
216, 134, 211, 19, 100, 88, 102, 209, 269, 25)
)

kuehl17.3.arm.dat <- data.frame(
  treatment=as.factor(c(1,1,1,1,2,2,2,2,3,3,3,3)), 
  replicate=as.factor(c(1,2,3,4,1,2,3,4,1,2,3,4)), 
  assessment2=c(1.5,3.1,3.8,3.3,1.9,1.8,2.9,2.3,1.1,4.3,3.7,1.8), 
  assessment1=c(45,58,61,59,54,57,55,56,43,60,71,48)
)


blocking.arm.dat <- data.frame(
plot=as.factor(c(108, 210, 311, 407, 509, 604, 710, 806, 105, 209, 308, 406, 502, 606, 705, 804, 106, 205, 301, 403, 508, 610, 706, 801, 102, 204, 305, 404, 510, 601, 704, 805, 103, 206, 309, 402, 506, 605, 701, 803, 111, 202, 303, 409, 504, 608, 703, 811, 104, 201, 304, 411, 503, 607, 702, 808, 109, 211, 307, 405, 501, 603, 708, 802, 101, 203, 302, 410, 505, 609, 707, 810, 107, 208, 310, 401, 507, 611, 709, 807, 110, 207, 306, 408, 511, 602, 711, 809)), 
treatment=as.factor(c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11)), 
replicate=as.factor(c(1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8)), 
assessment2=c(7, 2, 4, 4, 3, 7, 3, 1, 9, 5, 6, 6, 3, 9, 3, 5, 4, 5, 4, 6, 5, 6, 8, 9, 5, 0, 9, 3, 2, 9, 1, 3, 3, 3, 3, 9, 2, 3, 6, 2, 2, 5, 6, 4,
7, 3, 3, 1, 7, 3, 3, 8, 4, 5, 2, 3, 9, 6, 2, 0, 0, 1, 4, 4, 2, 8, 8, 1, 9, 9, 0, 4, 2, 2, 9, 1, 9, 4, 6, 4, 5, 4, 1, 2, 8, 4, 5, 5), 
assessment1=c(23, 5, 7, 30, 17, 24, 18, 24, 52, 12, 41, 13, 72, 19, 114, 78, 37, 56, 44, 28, 13, 22, 2, 43, 35, 64, 20, 29, 19, 25, 44, 11, 45, 15, 17, 67, 7, 24, 17, 23,
10, 142, 72, 10, 25, 56, 25, 29, 47, 78, 80, 50, 41, 15, 20, 20, 31, 14, 42, 107, 14, 29, 12, 23, 56, 30, 87, 11, 17, 12, 2, 30, 7, 37, 8, 41, 20, 74, 9, 17, 20, 20,
21, 37, 44, 49, 16, 21)
)

gomez.arm.dat <- data.frame(
plot=as.factor(c(202, 304, 403, 504, 508, 108, 205, 309, 502, 507, 204, 409, 503, 506, 510, 101, 106, 307, 501, 509, 103, 110, 206, 208, 404, 105, 210, 306, 405, 407, 203, 209, 301, 402, 406, 102, 308, 401, 410, 505, 104, 109, 207, 303, 310, 107, 201, 302, 305, 408)), 
treatment=as.factor(c(1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10)), 
replicate=as.factor(c(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)), 
block=as.factor(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 
column=as.factor(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 
y=c(2, 3, 4, 5, 5, 1, 2, 3, 5, 5, 2, 4, 5, 5, 5, 1, 1, 3, 5, 5, 1, 1, 2, 2, 4, 1, 2, 3, 4, 4, 2, 2, 3, 4, 4, 1, 3, 4, 4, 5, 1, 1, 2, 3, 3,
1, 2, 3, 3, 4), 
x=c(2, 4, 3, 4, 8, 8, 5, 9, 2, 7, 4, 9, 3, 6, 10, 1, 6, 7, 1, 9, 3, 10, 6, 8, 4, 5, 10, 6, 5, 7, 3, 9, 1, 2, 6, 2, 8, 1, 10, 5, 4, 9, 7, 3, 10,
7, 1, 2, 5, 8), 
lat=c(10, 17, 24, 31, 31, 3, 10, 17, 31, 31, 10, 24, 31, 31, 31, 3, 3, 17, 31, 31, 3, 3, 10, 10, 24, 3, 10, 17, 24, 24, 10, 10, 17, 24, 24, 3, 17, 24, 24, 31, 3, 3,
10, 17, 17, 3, 10, 17, 17, 24), 
lon=c(6.5, 15.5, 11, 15.5, 33.5, 33.5, 20, 38, 6.5, 29, 15.5, 38, 11, 24.5, 42.5, 2, 24.5, 29, 2, 38, 11, 42.5, 24.5, 33.5, 15.5, 20, 42.5, 24.5, 20, 29, 11, 38, 2, 6.5, 24.5, 6.5, 33.5, 2, 42.5, 20, 15.5, 38,
29, 11, 42.5, 29, 2, 6.5, 20, 33.5), 
assessment2=c(5, 12, 11, 8, 10, 7, 9, 8, 8, 8, 9, 5, 13, 7, 16, 6, 10, 8, 8, 11, 8, 5, 11, 5, 5, 11, 5, 11, 8, 8, 7, 4, 11, 5, 10, 8, 16, 7, 9, 10, 4, 7, 11,
5, 6, 10, 13, 11, 8, 7), 
assessment1=c(5, 12, 11, 5, 10, 7, 9, 14, 9, 8, 9, 5, 12, 5, 14, 7, 10, 6, 8, 14, 8, 5, 13, 5, 15, 12, 5, 9, 7, 8, 7, 4, 11, 6, 10, 7, 20, 6, 9, 8, 10, 6, 12,
5, 13, 10, 10, 7, 7, 8)
)
gomez.10.4.arm.dat <- data.frame(
plot=as.factor(c(102, 205, 310, 423, 103, 201, 314, 422, 101, 203, 316, 419, 107, 208, 315, 417, 108, 206, 312, 420, 105, 204, 311, 418, 106, 207, 313, 424, 104, 202, 309, 421, 110, 211, 319, 406, 114, 212, 322, 408, 109, 216, 324, 401, 113, 215, 323, 403, 115, 214, 320, 402, 116, 213, 321, 404, 112, 209, 317, 405, 111, 210, 318, 407, 117, 222, 308, 415, 122, 220, 306, 413, 118, 223, 304, 410, 120, 221, 303, 411, 124, 224, 307, 416, 121, 219, 301, 409, 119, 217, 302, 414, 123, 218, 305, 412)), 
treatment=as.factor(c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24)), 
replicate=as.factor(c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)), 
block=as.factor(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 
column=as.factor(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 
y=c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1,
2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3,
4, 1, 2, 3, 4), 
x=c(2, 5, 10, 23, 3, 1, 14, 22, 1, 3, 16, 19, 7, 8, 15, 17, 8, 6, 12, 20, 5, 4, 11, 18, 6, 7, 13, 24, 4, 2, 9, 21, 10, 11, 19, 6, 14, 12, 22, 8, 9, 16, 24,
1, 13, 15, 23, 3, 15, 14, 20, 2, 16, 13, 21, 4, 12, 9, 17, 5, 11, 10, 18, 7, 17, 22, 8, 15, 22, 20, 6, 13, 18, 23, 4, 10, 20, 21, 3, 11, 24, 24, 7, 16, 21, 19,
1, 9, 19, 17, 2, 14, 23, 18, 5, 12), 
lat=c(3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10,
17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24,
3, 10, 17, 24, 3, 10, 17, 24, 3, 10, 17, 24), 
lon=c(6.5, 20, 42.5, 101, 11, 2, 60.5, 96.5, 2, 11, 69.5, 83, 29, 33.5, 65, 74, 33.5, 24.5, 51.5, 87.5, 20, 15.5, 47, 78.5, 24.5, 29, 56, 105.5, 15.5, 6.5, 38, 92, 42.5, 47, 83, 24.5, 60.5, 51.5, 96.5, 33.5, 38,
69.5, 105.5, 2, 56, 65, 101, 11, 65, 60.5, 87.5, 6.5, 69.5, 56, 92, 15.5, 51.5, 38, 74, 20, 47, 42.5, 78.5, 29, 74, 96.5, 33.5, 65, 96.5, 87.5, 24.5, 56, 78.5, 101, 15.5, 42.5, 87.5, 92, 11, 47, 105.5, 105.5,
29, 69.5, 92, 83, 2, 38, 83, 74, 6.5, 60.5, 101, 78.5, 20, 51.5), 
assessment2=c(46.9, 37.3, 28.9, 58.1, 81.9, 45.5, 49, 55.1, 50, 78.1, 71.6, 79.1, 98.7, 91.2, 76, 61.2, 65.3, 87.3, 80.4, 61.1, 55.5, 66.5, 63.2, 70.2, 51, 54.1, 62.1, 58.3, 49.5, 45.6, 37.4, 50.9, 57.7, 40.3, 51.5, 31.3, 69.6, 81.6, 56.1, 73.5,
38.7, 71.2, 37.4, 69.5, 53.8, 64.5, 52.5, 53.5, 53.4, 64.8, 19.7, 39.3, 73.2, 86, 41.7, 61.3, 57.7, 87.6, 63.5, 45.8, 61.8, 58.7, 22.8, 35.8, 37.5, 63.8, 36.8, 95.5, 71.2, 88.7, 60.1, 142.8, 64.8, 139.5, 50.7, 110.6, 57.8, 104.3, 51.8, 106.9, 63.7,
77.8, 125.4, 98.5, 49.2, 52.4, 92.6, 0, 60.5, 30.4, 16, 0, 43.7, 66, 91.5, 0), 
assessment1=c(3, 1, 1, 3, 3, 1, 3, 1, 5, 1, 3, 3, 5, 1, 5, 5, 5, 1, 3, 5, 3, 3, 5, 5, 5, 5, 5, 5, 1, 3, 5, 3, 1, 3, 1, 3, 5, 1, 3, 5, 5, 1, 7, 3,
7, 3, 7, 3, 7, 3, 7, 5, 5, 1, 7, 5, 7, 1, 5, 5, 7, 1, 5, 7, 3, 3, 7, 4, 5, 3, 5, 3, 3, 1, 3, 3, 5, 1, 7, 1, 3, 1, 3, 1, 5, 5, 7, 9, 1, 7,
7, 9, 5, 7, 5, 9)
)
steel17.10.dat <- data.frame(
plot=as.factor(c(101, 206, 304, 401, 503, 102, 203, 301, 405, 504, 103, 202, 303, 402, 501, 104, 201, 305, 406, 505, 105, 204, 302, 404, 502, 106, 205, 306, 403, 506)), 
treatment=as.factor(c(1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6)), 
replicate=as.factor(c(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)), 
block=as.factor(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 
column=as.factor(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 
y=c(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5), 
x=c(1, 6, 4, 1, 3, 2, 3, 1, 5, 4, 3, 2, 3, 2, 1, 4, 1, 5, 6, 5, 5, 4, 2, 4, 2, 6, 5, 6, 3, 6), 
lat=c(3, 9, 15, 21, 27, 3, 9, 15, 21, 27, 3, 9, 15, 21, 27, 3, 9, 15, 21, 27, 3, 9, 15, 21, 27, 3, 9, 15, 21, 27), 
lon=c(2, 22, 14, 2, 10, 6, 10, 2, 18, 14, 10, 6, 10, 6, 2, 14, 2, 18, 22, 18, 18, 14, 6, 14, 6, 22, 18, 22, 10, 22), 
assessment2=c(9.520000, 8.210000, 9.320000, 10.560000, 10.420000, 9.940000, 9.480000, 9.320000, 10.9, 8.820000, 8.510000, 9.950000, 8.430000, 8.860000, 9.2, 10, 9.240000, 9.340000, 9.680000, 9.670000, 9.110000, 8.5, 8.9, 9.510000, 8.760000, 9.750000, 8.660000, 7.630000, 10.370000, 8.570000), 
assessment1=c(38, 35, 41, 48, 43, 48, 32, 35, 46, 32, 39, 38, 46, 40, 40, 48, 32, 41, 46, 37, 48, 37, 42, 42, 40, 48, 28, 33, 50, 30)
)
milliken3.15.arm.dat <- data.frame(
plot=as.factor(c(102, 201, 303, 402, 501, 602, 701, 802, 103, 202, 301, 403, 502, 603, 702, 803, 101, 203, 302, 401, 503, 601, 703, 801)), 
treatment=as.factor(c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3)), 
replicate=as.factor(c(1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8)), 
block=as.factor(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 
column=as.factor(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 
y=c(1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8), 
x=c(2, 1, 3, 2, 1, 2, 1, 2, 3, 2, 1, 3, 2, 3, 2, 3, 1, 3, 2, 1, 3, 1, 3, 1), 
lat=c(3, 9, 15, 21, 27, 33, 39, 45, 3, 9, 15, 21, 27, 33, 39, 45, 3, 9, 15, 21, 27, 33, 39, 45), 
lon=c(6, 2, 10, 6, 2, 6, 2, 6, 10, 6, 2, 10, 6, 10, 6, 10, 2, 10, 6, 2, 10, 2, 10, 2), 
assessment2=c(118, 138, 142, 147, 160, 166, 165, 171, 148, 159, 162, 157, 169, 164, 179, 177, 153, 150, 158, 152, 160, 154, 155, 164), 
assessment1=c(56, 59, 62, 68, 71, 76, 83, 87, 60, 62, 65, 66, 73, 75, 84, 88, 56, 58, 61, 64, 72, 75, 82, 86)
)
@

\section{Review of the Analysis of Covariance}

<<>>=
#arm.dat <- milliken3.15.arm.dat
#arm.dat <- steel17.10.dat
#arm.dat <- gomez.10.4.arm.dat
arm.dat <- cochran.arm.dat
#arm.dat <- milliken10.2.arm.dat
#arm.dat <- kuehl17.3.arm.dat
response.label = "Second Count"
covariate.label = "First Count"
reps <- length(levels(arm.dat$replicate))
treatments <- length(levels(arm.dat$treatment))
@

<<>>=
anova(lm(assessment2 ~ replicate + treatment,data=arm.dat))
anova(lm(assessment2 ~ replicate + treatment + assessment1,data=arm.dat))
anova(lm(assessment2 ~ replicate + treatment + assessment1 + I(assessment1^2),data=arm.dat))
anova(lm(assessment2 ~ replicate + treatment + assessment1 + treatment:assessment1,data=arm.dat))
@

<<CovariateMap,fig=TRUE,width=6,height=4>>=
library(desplot)
desplot(assessment1~x*y, data=arm.dat, cex=1, text=treatment,
        main="Trial map (color = initial counts)")
@

<<ReplicateMap,fig=TRUE,width=6,height=4>>=
desplot(replicate~x*y, data=arm.dat, cex=1, text=treatment,
        main="Trial map (color = block)", col.regions=cbPalette)
@





<<TreatmentCovariateMeans,fig=TRUE,echo=false,width=6,height=4>>=
CovMeans <- tapply(arm.dat$assessment1,list(arm.dat$treatment),mean)
CovOrder <- order(CovMeans)
ggplot(arm.dat, aes(x=treatment, y=assessment1)) +
  geom_boxplot(colour=cbPalette[1]) + 
  stat_summary(fun.y=mean,col=cbPalette[2],geom='point') +
  scale_x_discrete(limits=names(CovMeans)[CovOrder]) +
    labs(x='Treatment', y=covariate.label, title = "Distribution of covariate, ranked by mean")
@

<<TreatmentCovariateSD,fig=TRUE,echo=false,width=6,height=4>>=
CovSD <- tapply(arm.dat$assessment1,list(arm.dat$treatment),sd)
CovOrder <-  order(CovSD)

ggplot(arm.dat, aes(x=treatment, y=assessment1)) +
  geom_boxplot(colour=cbPalette[1]) + 
  stat_summary(fun.y=mean,col=cbPalette[2],geom='point') +
  scale_x_discrete(limits=names(CovMeans)[CovOrder]) +
    labs(x='Treatment', y=covariate.label, title = "Distribution of covariate, ranked by sd")
@

<<SimpleRegression,fig=TRUE,echo=false,width=8,height=4>>=
ggplot(arm.dat, aes(assessment1,assessment2)) + 
geom_point(aes(colour = treatment),size=2) + 
geom_smooth(color=cbPalette[treatments+1],se = FALSE, method = lm) +
scale_colour_manual(values=cbPalette) +
  labs(colour = "Treatment", x=covariate.label, y=response.label, title = "Simple Regression")
@

<<QuadraticRegression,fig=TRUE,echo=false,width=8,height=4>>=
ggplot(arm.dat, aes(assessment1,assessment2)) + 
geom_point(aes(colour = treatment),size=2) + 
geom_smooth(color=cbPalette[treatments+1],se = FALSE, method = lm, formula= y ~ poly(x,2)) +
scale_colour_manual(values=cbPalette) +
  labs(colour = "Treatment", x=covariate.label, y=response.label, title = "Quadratic Regression")
@

<<IndependentSlopeRegression,fig=TRUE,echo=false,width=8,height=4>>=
ggplot(arm.dat, aes(assessment1,assessment2)) + 
geom_point(aes(colour = treatment),size=2) + 
geom_smooth(aes(group=treatment,color=treatment),se = FALSE, method = lm) +
scale_colour_manual(values=cbPalette) +
  labs(colour = "Treatment", x=covariate.label, y=response.label, title = "Independent Slopes")
@

<<>>=
extremes <- levels(arm.dat$treatment)[c(which.min(CovMeans), which.max(CovMeans))]
@

<<ExtremeMeanRegression,fig=TRUE,echo=false,width=8,height=4>>=
ggplot(arm.dat[arm.dat$treatment %in% extremes,], aes(assessment1,assessment2)) + 
geom_point(aes(colour = treatment),size=2) + 
geom_smooth(aes(group=treatment,color=treatment),se = FALSE, method = lm) +
scale_colour_manual(values=cbPalette) +
  labs(x=covariate.label, y="Yield", title = "Extremes, Treatment Mean") +
  xlim(c(min(arm.dat$assessment1), max(arm.dat$assessment1))) +
  ylim(c(min(arm.dat$assessment2), max(arm.dat$assessment2)))
@

<<>>=
extremes <- levels(arm.dat$treatment)[c(which.min(CovSD), which.max(CovSD))]
@

<<ExtremeSDRegression,fig=TRUE,echo=false,width=8,height=4>>=
ggplot(arm.dat[arm.dat$treatment %in% extremes,], aes(assessment1,assessment2)) + 
geom_point(aes(colour = treatment),size=2) + 
geom_smooth(aes(group=treatment,color=treatment),se = FALSE, method = lm) +
scale_colour_manual(values=cbPalette) +
  labs(x=covariate.label, y="Yield", title = "Extremes, Treatment Standard Deviation")  +
  xlim(c(min(arm.dat$assessment1), max(arm.dat$assessment1))) +
  ylim(c(min(arm.dat$assessment2), max(arm.dat$assessment2)))
@

<<>>=
Slopes <- CovMeans
for (i in levels(arm.dat$treatment)) {
  sub.dat <- subset(arm.dat,arm.dat$treatment==i)
  slope <- coef(lm(assessment2 ~ assessment1,data=sub.dat))[2]
  Slopes[i] = slope
}
@

<<>>=
extremes <- levels(arm.dat$treatment)[c(which.min(Slopes), which.max(Slopes))]
@

<<ExtremeSlopeRegression,fig=TRUE,echo=false,width=8,height=4>>=
ggplot(arm.dat[arm.dat$treatment %in% extremes,], aes(assessment1,assessment2)) + 
geom_point(aes(colour = treatment),size=2) + 
geom_smooth(aes(group=treatment,color=treatment),se = FALSE, method = lm) +
scale_colour_manual(values=cbPalette) +
  labs(x=covariate.label, y="Yield", title = "Extremes, Treatment Response")  +
  xlim(c(min(arm.dat$assessment1), max(arm.dat$assessment1))) +
  ylim(c(min(arm.dat$assessment2), max(arm.dat$assessment2)))
@

\section{Randomizations}

<<>>=
arm.dat$cov <- arm.dat$assessment1/max(arm.dat$assessment1)
@


<<>>=
optimality <- function(lm,contrast=NULL) {
  if(is.null(lm$x)) {
    lm <- update(lm,x=TRUE)
  }
  X <- lm$x
  I <- t(X) %*% X
  return(list(D=det(I),A=sum(diag(I))))
}
@
<<>>=
simulations <- 5000
rcb.designs <- vector("list", length = simulations)
rcbrand.dat <- data.frame(
  Design = rep(0,simulations),
  MaxMeanDif = rep(0,simulations),
  MaxSDDif = rep(0,simulations),
  MeanSD = rep(0,simulations),
  MomentNorm = rep(0,simulations),
  D1 = rep(0,simulations),
  D2 = rep(0,simulations),
  D3 = rep(0,simulations),
  D4 = rep(0,simulations),
  D5 = rep(0,simulations),
  A1 = rep(0,simulations),
  A2 = rep(0,simulations),
  A3 = rep(0,simulations),
  A4 = rep(0,simulations)
)

postrand.dat <- rcbrand.dat
post.designs <- rcb.designs


@

<<>>=
for (s in 1:simulations) {
  if(s!=1) {
    #rerandomize RCB treatments
    for(blk in levels(arm.dat$replicate)) {
      arm.dat$treatment[arm.dat$replicate==blk] <- levels(arm.dat$treatment)[sample(1:treatments)]
    }
  }

  arm.dat$treatment <- as.factor(arm.dat$treatment)
  rcb.designs[[s]] <- arm.dat
  #mean and standard deviation for covariate among treatments
  cov.means <- tapply(arm.dat$cov,list(arm.dat$treatment),mean)
  cov.sds <- tapply(arm.dat$cov,list(arm.dat$treatment),sd)

  rcbrand.dat$MaxMeanDif[s] <- max(cov.means)-min(cov.means)
  rcbrand.dat$MaxSDDif[s] <- max(cov.sds)-min(cov.sds)
  rcbrand.dat$MeanSD[s] <- mean(cov.sds)
  rcbrand.dat$MomentNorm[s] <- sqrt(sum(rcbrand.dat$MaxMeanDif[s]^2+rcbrand.dat$MaxSDDif[s]^2))
    
  #fit linear models
rcb.lm <- lm(assessment1 ~ replicate + treatment, data = arm.dat, model=FALSE, x = TRUE)
Model1.lm <- lm(assessment1 ~ cov, data = arm.dat, model=FALSE, x = TRUE)
Model2.lm <- lm(assessment1 ~ cov +  treatment, data = arm.dat, model=FALSE, x = TRUE)
Model3.lm <- lm(assessment1 ~ cov +  treatment + treatment:cov, data = arm.dat, model=FALSE, x = TRUE)
Model4.lm <- lm(assessment1 ~ cov +  treatment + replicate + treatment:cov, data = arm.dat, model=FALSE, x = TRUE)
Model5.lm <- lm(assessment1 ~ cov +  treatment + replicate + treatment:cov + replicate:cov, data = arm.dat, model=FALSE, x = TRUE)

opt.1 <- optimality(Model1.lm)
I.2 <- t(Model2.lm$x) %*% Model2.lm$x
I.3 <- t(Model3.lm$x) %*% Model3.lm$x
I.4 <- t(Model4.lm$x) %*% Model4.lm$x
I.5 <- t(Model5.lm$x) %*% Model5.lm$x

  # randomize by covariate
  arm.dat$Rank <- rank(arm.dat$cov,ties.method = c("random"))
    arm.dat$PostBlock <- ceiling(arm.dat$Rank/treatments)
    for(blk in 1:max(arm.dat$PostBlock)) {
      arm.dat$PostTreatment[arm.dat$PostBlock==blk] <- sample(1:treatments)
    }

  arm.dat$PostBlock <- as.factor(arm.dat$PostBlock)
  arm.dat$PostTreatment <- as.factor(arm.dat$PostTreatment)
  post.designs[[s]] <- arm.dat
  cov.means <- tapply(arm.dat$cov,list(arm.dat$PostTreatment),mean)
  cov.sds <- tapply(arm.dat$cov,list(arm.dat$PostTreatment),sd)
  
  postrand.dat$MaxMeanDif[s] <- max(cov.means)-min(cov.means)
  postrand.dat$MaxSDDif[s] <- max(cov.sds)-min(cov.sds)
  postrand.dat$MeanSD[s] <- mean(cov.sds)
  postrand.dat$MomentNorm[s] <- sqrt(sum(postrand.dat$MaxMeanDif[s]^2+postrand.dat$MaxSDDif[s]^2))
  
PostModel1.lm <- lm(assessment1 ~ cov, data = arm.dat, model=FALSE, x = TRUE)
PostModel2.lm <- lm(assessment1 ~ cov +  PostTreatment, data = arm.dat, model=FALSE, x = TRUE)
PostModel3.lm <- lm(assessment1 ~ cov +  PostTreatment + PostTreatment:cov, data = arm.dat, model=FALSE, x = TRUE)
PostModel4.lm <- lm(assessment1 ~ cov +  PostTreatment + PostBlock + PostTreatment:cov, data = arm.dat, model=FALSE, x = TRUE)
PostModel5.lm <- lm(assessment1 ~ cov +  PostTreatment + PostBlock + PostTreatment:cov + PostBlock:cov, data = arm.dat, model=FALSE, x = TRUE)

opt.P1 <- optimality(PostModel1.lm)
I.P2 <- t(PostModel2.lm$x) %*% PostModel2.lm$x
I.P3 <- t(PostModel3.lm$x) %*% PostModel3.lm$x
I.P4 <- t(PostModel4.lm$x) %*% PostModel4.lm$x
I.P5 <- t(PostModel5.lm$x) %*% PostModel5.lm$x
  #calculate optimality from information
  rcbrand.dat$D1[s] = opt.1$D
  rcbrand.dat$D2[s]= det(I.2)
  rcbrand.dat$D3[s] = det(I.3)
  rcbrand.dat$D4[s] = det(I.4)
  rcbrand.dat$D5[s] = det(I.5)
  
  postrand.dat$D1[s] = opt.P1$D
  postrand.dat$D2[s]= det(I.P2)
  postrand.dat$D3[s] = det(I.P3)
  postrand.dat$D4[s] = det(I.P4)
  postrand.dat$D5[s] = det(I.P5)

  rcbrand.dat$A1[s] = opt.1$A
  rcbrand.dat$A2[s]= trace(I.2)
  rcbrand.dat$A3[s] = trace(I.3)
  rcbrand.dat$A4[s] = trace(I.4)
  
  postrand.dat$A1[s] = opt.P1$A
  postrand.dat$A2[s]= trace(I.2)
  postrand.dat$A3[s] = trace(I.3)
  postrand.dat$A4[s] = trace(I.4)
}
@



\subsection{Relationship among optimality measures}

<<>>=
rcbrand.dat$Source <- 'RCB'
postrand.dat$Source <- 'Post'
combined.dat <- rbind(rcbrand.dat,postrand.dat)
@

<<D1vsD2,fig=TRUE,echo=false,width=6,height=4>>=
ggplot(combined.dat, aes(D1, D2)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette)
@

<<D2vsD3,fig=TRUE,echo=false,width=6,height=4>>=
ggplot(combined.dat, aes(D2, D3)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette)
@

<<D3vsD4,fig=TRUE,echo=false,width=6,height=4>>=
ggplot(combined.dat, aes(D3, D4)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette)
@

So, it appears that we can select from optimal designs using D with either model 3 or 4

<<>>=
opt.designs<- c(1,
                which.max(rcbrand.dat$D3)[1],
                which.max(rcbrand.dat$D4)[1],
                which.max(rcbrand.dat$D2)[1],
                which.min(rcbrand.dat$MomentNorm)[1],
                1#,
                #which.min(rcbrand.dat$MaxMeanDif*rcbrand.dat$MeanSD)
                )
opt.post.designs <- c(which.max(postrand.dat$D3)[1],
                which.max(postrand.dat$D4)[1],
                which.max(postrand.dat$D2)[1],
                which.min(postrand.dat$MomentNorm)[1]#,
                #which.min(postrand.dat$MaxMeanDif*postrand.dat$MeanSD)
                )
sub.designs <- c(which.min(rcbrand.dat$D3)[1],
                which.min(rcbrand.dat$D4)[1],
                which.min(rcbrand.dat$D2)[1],
                which.max(rcbrand.dat$MomentNorm)[1]#,
                #which.max(rcbrand.dat$MaxMeanDif*rcbrand.dat$MeanSD)
                )
sub.post.designs <- c(which.min(postrand.dat$D3)[1],
                which.min(postrand.dat$D4)[1],
                which.min(postrand.dat$D2)[1],
                which.max(postrand.dat$MomentNorm)[1]#,
                #which.max(postrand.dat$MaxMeanDif*postrand.dat$MeanSD)
                )
opt.d.rcb <- opt.designs[2]
opt.d.post <- opt.post.designs[1]
worst.d.rcb <- sub.designs[1]
worst.d.post <- sub.post.designs[1]
@

<<>>=
opt.designs
sub.designs 
opt.post.designs
sub.post.designs
@

<<>>=
reference.rcb.dat <- subset(rcbrand.dat[opt.designs,])
reference.rcb.dat$Criteria <- c("Original",
                              "D Model 2",
                              "D Model 3",
                              "D Model 1",
                             "Moment Norm", #,
                             "Adaptive"
                             #"MaxxMean"
                             )
reference.post.dat <- subset(postrand.dat[opt.post.designs,])
reference.post.dat$Criteria <- reference.rcb.dat$Criteria[-c(1,6)]
reference.dat <- rbind(reference.rcb.dat,reference.post.dat)
@

\clearpage
\subsection{Best and Worst Randomizations}

<<>>=
example.post <- post.designs[[1]]
best.post <- post.designs[[opt.d.post]]
CovRank <- rank(tapply(best.post$cov,list(best.post$PostTreatment),mean),ties.method = c("random"))
best.post$CovRank <- CovRank[best.post$PostTreatment]
best.post$CovRank <- as.factor(best.post$CovRank)

worst.post <- post.designs[[worst.d.post]]
CovRank <- rank(tapply(worst.post$cov,list(worst.post$PostTreatment),mean),ties.method = c("random"))
worst.post$CovRank <- CovRank[worst.post$PostTreatment]
worst.post$CovRank <- as.factor(worst.post$CovRank)

best.post$Design <- 'Post-block, max(D)'
worst.post$Design <- 'Post-block, min(D)'
@


<<>>=

best.rcb <- rcb.designs[[opt.d.rcb]]
CovRank <- rank(tapply(best.rcb$cov,list(best.rcb$treatment),mean),ties.method = c("random"))
best.rcb$CovRank <- CovRank[best.rcb$treatment]
best.rcb$CovRank <- as.factor(best.rcb$CovRank)

worst.rcb <- rcb.designs[[worst.d.rcb]]
CovRank <- rank(tapply(worst.rcb$cov,list(worst.rcb$treatment),mean),ties.method = c("random"))
worst.rcb$CovRank <- CovRank[worst.rcb$treatment]
worst.rcb$CovRank <- as.factor(worst.rcb$CovRank)

best.rcb$Design <- 'RCB, max(D)'
worst.rcb$Design <- 'RCB, min(D)'

comp.rcb <- rbind(best.rcb,worst.rcb)

comp.randomizatons <- rbind(best.post,worst.post,best.rcb,worst.rcb)

comp.rcb <- rbind(best.post,best.rcb)
comp.rcb <- rbind(worst.post,worst.rcb)
@


%<<BestPostCovariateMap,fig=TRUE,echo=false,width=6,height=4>>=
%desplot(Rank~x*y, data=example.post, cex=1, text=Rank,
%       main="Trial map (color = initial count rank)")
%@


%<<BestPostReplicateMap,fig=TRUE,echo=false,width=6,height=4>>=
%desplot(PostBlock~x*y, data=example.post, cex=1, text=PostBlock,
%        main="Trial map (color = variable block)", col.regions=cbPalette)
%@


<<PostTreatmentCovariateMeans,fig=TRUE,echo=false,width=6,height=4>>=
CovMeans <- tapply(example.post$assessment1,list(example.post$PostTreatment),mean)
CovOrder <- order(CovMeans)
ggplot(example.post, aes(x=PostTreatment, y=assessment1)) +
  geom_boxplot(colour=cbPalette[1]) + 
  stat_summary(fun.y=mean,col=cbPalette[2],geom='point') +
  scale_x_discrete(limits=names(CovMeans)[CovOrder]) +
    labs(x='Treatment', y=covariate.label, title = "Distribution of covariate, ranked by mean")
@

\section{RCB with Variable Blocking}


<<CompareRandomizations,fig=TRUE,echo=false,width=6,height=3>>=
qplot(CovRank,cov,data=comp.randomizatons,geom='boxplot') + stat_summary(fun.y=mean,shape=1,col='red',geom='point') +
  facet_wrap(~Design)
@

<<MaxMeanDifvsMaxSDDif,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(x=MaxMeanDif, y=MaxSDDif)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette) +
      geom_point(data = reference.dat, mapping = aes(x=MaxMeanDif, y=MaxSDDif, shape=Criteria,colour = Source), size = 4) +
    labs(x='Largest Mean Difference', y="Largest SD Difference", title = "Moment Ranges")
@

<<MaxMeanDifvsMeanSD,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(x=MaxMeanDif, y=MeanSD)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette)  +
      geom_point(data = reference.dat, mapping = aes(x=MaxMeanDif, y=MeanSD, shape=Criteria), size = 3) +
    labs(x='Largest Mean Difference', y="Mean SD", title = "Moment Ranges")
@


<<MeanSDvsMaxSDDif,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(x=MeanSD,y=MaxSDDif)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette)  +
      geom_point(data = reference.dat, mapping = aes(x=MeanSD, y=MaxSDDif, shape=Criteria), size = 4) +
  labs(x='Mean Standard Deviation', y="Largest SD Difference", title = "Moment Ranges")
@

<<MaxMeanDifvsD2,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(x=MaxMeanDif, y=D2)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette) +
      geom_point(data = reference.dat, mapping = aes(x=MaxMeanDif, y=D2, shape=Criteria), size = 4) +
  labs(x='Largest Mean Difference', y="D Optimality", title = "Optimality, Model 1")
@

<<MaxSDDifvsD2,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(x=MaxSDDif, y=D2)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette)  +
      geom_point(data = reference.dat, mapping = aes(x=MaxSDDif, y=D2, shape=Criteria), size = 4) +
  labs(x='Largest SD Difference', y="D Optimality", title = "Optimality, Model 1")
@

<<MomentNormvsD2,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(x=MomentNorm, y=D2)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette)  +
      geom_point(data = reference.dat, mapping = aes(x=MomentNorm, y=D2, shape=Criteria), size = 4) + labs(x='Moment Norm', y="D Optimality", title = "Optimality, Model 1")
@


<<MaxMeanDifvsD3,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(x=MaxMeanDif, y=D3)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette) +
      geom_point(data = reference.dat, mapping = aes(x=MaxMeanDif, y=D3, shape=Criteria), size = 4) +
    labs(x='Largest Mean Difference', y="D Optimality", title = "Optimality, Model 2")
@

<<MaxSDDifvsD3,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(x=MaxSDDif, y=D3)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette)  +
      geom_point(data = reference.dat, mapping = aes(x=MaxSDDif, y=D3, shape=Criteria), size = 4)+
  labs(x='Largest SD Difference', y="D Optimality", title = "Optimality, Model 2")
@

<<MomentNormvsD3,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(x=MomentNorm, y=D3)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette)  +
      geom_point(data = reference.dat, mapping = aes(x=MomentNorm, y=D3, shape=Criteria), size = 4) + labs(x='Moment Norm', y="D Optimality", title = "Optimality, Model 2")
@


<<MaxMeanDifvsD4,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(MaxMeanDif, D4)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette) +
      geom_point(data = reference.dat, mapping = aes(x=MaxMeanDif, y=D4, shape=Criteria), size = 4) +
    labs(x='Largest Mean Difference', y="D Optimality", title = "Optimality, Model 3")
@

<<MaxSDDifvsD4,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(MaxSDDif, D4)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette)  +
      geom_point(data = reference.dat, mapping = aes(x=MaxSDDif, y=D4, shape=Criteria), size = 4) +
    labs(x='Largest SD Difference', y="D Optimality", title = "Optimality, Model 3")
@

<<MomentNormvsD4,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(x=MomentNorm, y=D4)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette)  +
      geom_point(data = reference.dat, mapping = aes(x=MomentNorm, y=D4, shape=Criteria), size = 4) + labs(x='Moment Norm', y="D Optimality", title = "Optimality, Model 3")
@

\section{Optimal design in regression}

Suppose we can control the levels of covariate. What is the optimal design?


<<>>=
arm.dat <- cochran.arm.dat
replicates <- length(levels(arm.dat$replicate))
treatments <- length(levels(arm.dat$treatment))

arm.dat$cov <- arm.dat$assessment1/mean(arm.dat$assessment1)
arm.dat$Rank <- rank(arm.dat$cov,ties.method = c("random"))
arm.dat$PostBlock <- ceiling(arm.dat$Rank/treatments)
for(blk in 1:max(arm.dat$PostBlock)) {
  arm.dat$PostTreatment[arm.dat$PostBlock==blk] <- sample(1:treatments)
}
    
quantiles <- quantile(arm.dat$cov, seq(0, 1, 1/replicates))
mid.points <- (quantiles[2:(replicates+1)]+quantiles[1:replicates])/2
mid.points
arm.dat$covQ <- mid.points[arm.dat$replicate]

uniform <- seq(min(arm.dat$cov), max(arm.dat$cov),(max(arm.dat$cov)- min(arm.dat$cov))/replicates)
uniform.points <- (uniform[2:(replicates+1)]+uniform[1:replicates])/2
arm.dat$covU <- uniform.points[arm.dat$replicate]

post.mean <- tapply(arm.dat$cov,list(arm.dat$PostBlock),mean)
rep.mean <- tapply(arm.dat$cov,list(arm.dat$replicate),mean)
arm.dat$covP <- post.mean[arm.dat$PostBlock]
arm.dat$covR <- rep.mean[arm.dat$replicate]

optimality(lm(assessment2 ~ treatment + cov, data=arm.dat,x=TRUE))
optimality(lm(assessment2 ~ treatment + covQ, data=arm.dat,x=TRUE))
optimality(lm(assessment2 ~ treatment + covU, data=arm.dat,x=TRUE))
optimality(lm(assessment2 ~ treatment + covP,data=arm.dat,x=TRUE))
optimality(lm(assessment2 ~ treatment + covR,data=arm.dat,x=TRUE))

optimality(lm(assessment2 ~ cov +  treatment + treatment:cov,data=arm.dat,x=TRUE))
optimality(lm(assessment2 ~ covQ +  treatment + treatment:covQ,data=arm.dat,x=TRUE))
optimality(lm(assessment2 ~ covU +  treatment + treatment:covU,data=arm.dat,x=TRUE))
optimality(lm(assessment2 ~ covP +  treatment + treatment:covP,data=arm.dat,x=TRUE))
optimality(lm(assessment2 ~ covR +  treatment + treatment:covR,data=arm.dat,x=TRUE))

@


<<DOptimal,fig=TRUE,echo=false,width=6,height=6>>=
arm.dat$TrtNo <- as.numeric(as.character((arm.dat$treatment)))
plot(cov ~ TrtNo,data=arm.dat,type='p',pch=19)
points(covQ ~ TrtNo,data=arm.dat,col='red',pch=19)
points(covU ~ TrtNo,data=arm.dat,col='blue',pch=19)
points(covP ~ TrtNo,data=arm.dat,col='yellow',pch=19)
#points(covR ~ TrtNo,data=arm.dat,col='orange',pch=19)
#abline(h=uniform.points,col='blue')
#abline(h=mid.points,col='red')
points(cov ~ PostTreatment,data=arm.dat,col='green',pch=19)
@


\section{Adaptive Design}

Step 1. Randomize one replicate
<<>>=
arm.dat <- cochran.arm.dat
replicates <- length(levels(arm.dat$replicate))
treatments <- length(levels(arm.dat$treatment))
arm.dat$cov <- arm.dat$assessment1/max(arm.dat$assessment1)

arm.dat$AdaptiveTreatment <- 0
arm.dat$CovRank <- 0

#for(blk in 1:max(arm.dat$PostBlock)) {
randomization <-  1:treatments
rows <- arm.dat$replicate==1
cov1 <- arm.dat$cov[rows]

assigned <- arm.dat$AdaptiveTreatment

rank1 <- rank(cov1,ties.method = "random")
randomization[rank1]
arm.dat$AdaptiveTreatment[rows] <- rank1
arm.dat$CovRank[rows] <- rank1
@

<<Step1,fig=TRUE,echo=false,width=6,height=3>>=
ggplot(arm.dat, aes(x=AdaptiveTreatment, y=assessment1)) + geom_point(aes(colour = replicate),size=1) + scale_colour_manual(values=cbPalette)
@

<<>>=
rows <- arm.dat$replicate==2
cov2 <- arm.dat$cov[rows]

rank2 <- rank(cov2,ties.method = "random")
cov2[rank2]
rank2
rank2[treatments:1]
(treatments:1)[rank2]
arm.dat$AdaptiveTreatment[rows] <- (treatments:1)[rank2]
arm.dat$CovRank[rows] <- rank2
@

<<Step2,fig=TRUE,echo=false,width=6,height=3>>=
ggplot(arm.dat, aes(x=AdaptiveTreatment, y=assessment1)) + geom_point(aes(colour = replicate),size=1) + scale_colour_manual(values=cbPalette)
@

Treatments with the smallest range should get the most extreme values

<<>>=
row.names(arm.dat) <- arm.dat$plot
assigned.dat <- subset(arm.dat,arm.dat$AdaptiveTreatment>0)
current.sd <- tapply(assigned.dat$assessment1,list(assigned.dat$AdaptiveTreatment),sd)
current.mean <- tapply(assigned.dat$assessment1,list(assigned.dat$AdaptiveTreatment),mean)
print(current.sd)
print(current.mean)
sd.order <- order(current.sd)
sd.rank <- rank(current.sd,ties.method = "random")
trt.range <- cov1[1:treatments] - cov2[1:treatments]
#rank(trt.range)
rows <- arm.dat$replicate==3
cov3 <- arm.dat$cov[rows]
plots <- arm.dat$plot[rows]
rank3 <- rank((cov3 - mean(c(cov1,cov2))),ties.method = "random")
order3 <- order((cov3 - mean(c(cov1,cov2))))
(1:treatments)[sd.rank]

@

We want the treatment with the smallest sd value placed in the plot with the largest cov deviation

<<>>=
arm.dat[as.character(plots[order3[(treatments:1)]]),'AdaptiveTreatment'] <- (1:treatments)[sd.order]
@

<<>>=
#arm.dat$AdaptiveTreatment[rows] <- ((treatments:1)[rank3])[sd.order]
arm.dat$AdaptiveTreatment[rows] <- c(7,4,8,6,2,10,11,3,9,1,12,5)
@


<<Step3,fig=TRUE,echo=false,width=6,height=3>>=
ggplot(arm.dat, aes(x=AdaptiveTreatment, y=assessment1)) + geom_point(aes(colour = replicate),size=1) + scale_colour_manual(values=cbPalette)
@

<<>>=
assigned.dat <- subset(arm.dat,arm.dat$AdaptiveTreatment>0)
current.sd <- tapply(assigned.dat$assessment1,list(assigned.dat$AdaptiveTreatment),sd)
current.mean <- tapply(assigned.dat$assessment1,list(assigned.dat$AdaptiveTreatment),mean)
sd.order <- order(current.sd)
mean.order <- order(current.mean)
sd.rank <- rank(current.sd,ties.method = "random")
trt.range <- cov1[1:treatments] - cov2[1:treatments]
#rank(trt.range)
rows <- arm.dat$replicate==4
cov4 <- arm.dat$cov[rows]
plots <- arm.dat$plot[rows]
rank4 <- rank((cov4 - mean(c(cov1,cov2,cov3))),ties.method = "random")
order4 <- order((cov4 - mean(c(cov1,cov2,cov3))))

arm.dat[as.character(plots[order4[(treatments:1)]]),'AdaptiveTreatment'] <- (1:treatments)[sd.order]
arm.dat[as.character(plots[order4[(treatments:1)]]),'AdaptiveTreatment'] <- (1:treatments)[mean.order]
@

<<Step4,fig=TRUE,echo=false,width=6,height=3>>=
ggplot(arm.dat, aes(x=AdaptiveTreatment, y=assessment1)) + geom_point(aes(colour = replicate),size=1) + scale_colour_manual(values=cbPalette)
@

<<>>=
arm.dat$AdaptiveTreatment <- as.factor(arm.dat$AdaptiveTreatment)

arm.dat[,c('replicate',"AdaptiveTreatment")]

model1 <- optimality(lm(assessment2 ~ AdaptiveTreatment + cov,data=arm.dat,x=TRUE))
model2 <- optimality(lm(assessment2 ~ cov +  AdaptiveTreatment + AdaptiveTreatment:cov,data=arm.dat,x=TRUE))
model3 <- optimality(lm(assessment2 ~ cov +  replicate + AdaptiveTreatment + AdaptiveTreatment:cov,data=arm.dat,x=TRUE))

adaptive <- which(reference.rcb.dat$Criteria == "Adaptive")
reference.rcb.dat$D2[adaptive] <- model1$D
reference.rcb.dat$D3[adaptive] <- model2$D
reference.rcb.dat$D4[adaptive] <- model3$D

cov.means <- tapply(arm.dat$cov,list(arm.dat$AdaptiveTreatment),mean)
cov.sds <- tapply(arm.dat$cov,list(arm.dat$AdaptiveTreatment),sd)

reference.rcb.dat$MaxMeanDif[adaptive] <- max(cov.means)-min(cov.means)
reference.rcb.dat$MaxSDDif[adaptive] <- max(cov.sds)-min(cov.sds)
reference.rcb.dat$MeanSD[adaptive] <- mean(cov.sds)
reference.rcb.dat$MomentNorm[adaptive] <- sqrt(sum(reference.rcb.dat$MaxMeanDif[adaptive]^2+reference.rcb.dat$MaxSDDif[adaptive]^2))
    
  
@


<<MaxMeanDifvsMaxSDDifAdaptive,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(combined.dat, aes(x=MaxMeanDif, y=MaxSDDif)) + geom_point(aes(colour = Source),size=1) + scale_colour_manual(values=cbPalette) +
      geom_point(data = reference.rcb.dat, mapping = aes(x=MaxMeanDif, y=MaxSDDif, shape=Criteria,colour = Source), size = 4) +
    labs(x='Largest Mean Difference', y="Largest SD Difference", title = "Moment Ranges")
@

\end{document}

