\documentclass{report}
\usepackage{amsmath}

\begin{document}

\section{Introduction}
For general overview, see \verb|http://glmm.wikidot.com/pkg-comparison|
 
\section{Simple RCB with missing values (Geisbrecht)}
<<>>=
initwd <- getwd() 
path = "~/Work/git/ASA_CSSA_SSSA/ASA_CSSA_SSSA/R"
for (nm in list.files(path)) {
   source(file.path(path, nm))
}
setwd("~/Work/git/ASA_CSSA_SSSA/working")
bestseed <- 1500
set.seed(bestseed)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#F0E442","#CC79A7", "#734f80", "#2b5a74", "#004f39", "#787221", "#003959", "#6aaf00", "#663cd3", "#000000")
@ 

<<>>=
Table5.7 <- data.frame(
        plot = c(101,102,103,104,105,106,201,202,203,204,205,206,301,302,303,304,305,306,401,402,403,404,405,406),
        rep = as.factor(c(1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4)),
        col = as.factor(c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)),
        trt = as.factor(c(4,5,6,3,1,2,6,4,2,5,3,1,2,3,1,6,5,4,3,6,2,5,4,1)),
        obs = c(3.43,5.25,6.47,2.8,NA,2.66,8.43,6.09,6.41,5.69,7.04,NA,6.07,6.19,4.93,5.95,4.99,3.26,5.22,7.35,4.48,6.34,6.71,3.13)
   )
#some packages choke on missing values
Table5.7 <- subset(Table5.7, !is.na(Table5.7$obs))
Table5.7$rep <- as.factor(Table5.7$rep)
Table5.7$trt <- as.factor(Table5.7$trt)
treatments <- length(levels(Table5.7$trt))

@

<<>>=
Ex16.8.1 <- data.frame(
Trial=as.factor(c("Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", 
                  "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton",
                  "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton",
                  "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton", "Clayton",
                  "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton",
                  "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton",
                  "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton",
                  "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton", "Clinton",
                  "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth",
                  "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth",
                  "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth",
                  "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth", "Plymouth")),
Variety=as.factor(c("Tracy", "Tracy", "Tracy", "Centennial", "Centennial", "Centennial", "N72-137", "N72-137","N72-137", 
                       "N72-3058", "N72-3058", "N72-3058", "N72-3148", "N72-3148", "N72-3148", "R73-81", "R73-81", "R73-81", 
                       "D74-7741", "D74-7741", "D74-7741", "N73-693", "N73-693", "N73-693", "N73-877", "N73-877", "N73-877", 
                       "N73-882", "N73-882", "N73-882", "N73-1102", "N73-1102", "N73-1102", "R75-12", "R75-12", "R75-12", 
                       "Tracy", "Tracy", "Tracy", "Centennial", "Centennial", "Centennial", "N72-137", "N72-137", "N72-137", 
                       "N72-3058", "N72-3058", "N72-3058", "N72-3148", "N72-3148", "N72-3148", "R73-81", "R73-81", "R73-81", 
                       "D74-7741", "D74-7741", "D74-7741", "N73-693", "N73-693", "N73-693", "N73-877", "N73-877", "N73-877", 
                       "N73-882", "N73-882", "N73-882", "N73-1102", "N73-1102", "N73-1102", "R75-12", "R75-12", "R75-12", 
                       "Tracy", "Tracy", "Tracy", "Centennial", "Centennial", "Centennial", "N72-137", "N72-137", "N72-137", 
                       "N72-3058", "N72-3058", "N72-3058", "N72-3148", "N72-3148", "N72-3148", "R73-81", "R73-81", "R73-81", 
                       "D74-7741", "D74-7741", "D74-7741", "N73-693", "N73-693", "N73-693", "N73-877", "N73-877", "N73-877", 
                       "N73-882", "N73-882", "N73-882", "N73-1102", "N73-1102", "N73-1102", "R75-12", "R75-12", "R75-12")),
Yield=c(1178, 1089, 960, 1187, 1180, 1235, 1451, 1177, 1723, 1318, 1012, 990, 1345, 
        1335, 1303, 1175, 1064, 1158, 1111, 1111, 1099, 1388, 1214, 1222, 1254, 1249, 
        1135, 1179, 1247, 1096, 1345, 1265, 1178, 1136, 1161, 1004, 1583, 1841, 1464, 
        1713, 1684, 1378, 1369, 1608, 1647, 1547, 1647, 1603, 1622, 1801, 1929, 1800, 
        1787, 1520, 1820, 1521, 1851, 1464, 1607, 1642, 1775, 1513, 1570, 1673, 1507, 
        1390, 1894, 1547, 1751, 1422, 1393, 1342, 1307, 1365, 1542, 1425, 1475, 1276, 
        1289, 1671, 1420, 1250, 1202, 1407, 1546, 1489, 1724, 1344, 1197, 1319, 1280, 
        1260, 1605, 1583, 1503, 1303, 1656, 1371, 1107, 1398, 1497, 1583, 1586, 1423, 
        1524, 911, 1202, 1012),
Rep=as.factor(c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 
                   1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 
                   1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 
                   1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 
                   1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 
                   1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 
                   1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 
                   1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 
                   1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3))
)
Ex16.8.1.treatments <- length(levels(Ex16.8.1$Variety))
@

\subsection{lm}

<<>>=
Table5.7.lm <- lm(obs ~ 0 + trt+rep, data = Table5.7)   
Ex16.8.1.lm <- lm(Yield ~ Trial:Rep + Variety*Trial, data=Ex16.8.1)
Table5.7.df <- 13
Ex16.8.1.df <- 66
@

<<Table5_7_Diagnostics_lm,fig=TRUE,echo=false>>=
par(mfrow = c(2, 2)) 
plot(Table5.7.lm)
par(mfrow = c(1,1))
@

<<Ex16_8_1_Diagnostics_lm,fig=TRUE,echo=false>>=
par(mfrow = c(2, 2)) 
plot(Table5.7.lm)
par(mfrow = c(1,1))
@
\subsubsection{Model Summary}




\subsubsection{Multiple Comparisons}

With missing values, we need to consider if treatments appear the same number of times per replicate; this affects standard errors.

<<>>=
library(multcomp)
@

<<>>=
library(lsmeans)
@


\subsubsection{Graphing}
<<>>=
make.plot.table <- function(model,form=NULL,effect=NULL) {
   if(is.null(effect)) {
      effect <- "trt"
   }
   if(is.null(form)) {
      form <- formula(paste("cld ~ ",effect))
   }
   model.tbl <- lsmeans(model,form)
   mcp.list <- list(effect="Tukey")
   names(mcp.list) <- effect
   attr(mcp.list, "interaction_average") <- TRUE
   attr(mcp.list, "covariate_average") <- TRUE
   class(mcp.list) <- "mcp"
   letters <- cld(glht(model,linfct=mcp.list,interaction_average = TRUE, 
                                             covariate_average = TRUE),
                        decreasing=TRUE)$mcletters$Letters
   model.tbl$letters <- letters[model.tbl[,effect]]
   names(model.tbl) <- c("Treatment","Mean","Error","df","Lower","Upper","Group","Letters")
   return(model.tbl)
}
plot.lsmeans.tbl <- function(model.tbl,formula=NULL,title="lm") {
   dodge <- position_dodge(width = 0.9)
   upper.lim <- max(model.tbl$Upper)
   upper.lim <-  upper.lim + 0.1*upper.lim 
   limits <- aes(ymax = model.tbl$Upper, ymin = model.tbl$Lower)
   return(ggplot(data = model.tbl, aes(x = Treatment, y = Mean, fill = Treatment)) + 
     geom_bar(stat = "identity", position = dodge) +
     coord_cartesian(ylim = c(min(model.tbl$Lower),upper.lim)) +
     geom_errorbar(limits, position = dodge, width = 0.25) +
     theme(legend.position = "none") + ggtitle(title) + 
     scale_fill_manual(values=cbPalette) +
     geom_text(aes(x=model.tbl$Treatment,y=upper.lim,label=Letters))
   )
}
plot.lsmeans <- function(model,form=NULL,effect=NULL,title="lm") {
   return(
      plot.lsmeans.tbl(
         make.plot.table(model,form=form,effect=effect),formula=formula,title=title))
}
@


<<Table5_7_lm_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.lm.tbl <- make.plot.table(Table5.7.lm)
Table5.7.lm.plot <- plot.lsmeans.tbl(Table5.7.lm.tbl)
Table5.7.lm.plot
@
 
 
<<Ex16_8_1_lm_plot,fig=TRUE,echo=false,width=7,height=4>>=
Ex16.8.1.lm.tbl <- make.plot.table(Ex16.8.1.lm,effect="Variety",form=cld ~ Variety)
Ex16.8.1.lm.plot <- plot.lsmeans.tbl(Ex16.8.1.lm.tbl,title="lm",formula=cld ~ Variety)
Ex16.8.1.lm.plot
@


\subsection{lme}

<<>>=
library(nlme)
Table5.7.lme <- lme(obs ~ 0+trt, random = ~ 1 | rep, data=Table5.7)
#excluding the intercept makes me doubt this model
Ex16.8.1$Block <- Ex16.8.1$Trial:Ex16.8.1$Rep 
Ex16.8.1.lme <- lme(Yield ~ Trial*Variety, random = ~ 1 | Block, data=Ex16.8.1)
@

\subsubsection{Diagnostics}
<<Table5_7_Diagnostics_lme,fig=TRUE,echo=false>>=
plot(Table5.7.lme)
@

<<Table5_7_Diagnostics_normalized_lme,fig=TRUE,echo=false>>=
plot(Table5.7.lme,idResType = "normalized")
@

<<Table5_7_Diagnostics_qqnorm_lme,fig=TRUE,echo=false>>=
qqnorm(Table5.7.lme)
@

<<>>=
load(file="meta.lme.Rda")
load(file="cotes.lme.Rda")
@

<<META_Diagnostics_qqnorm_lme,fig=TRUE,echo=false>>=
qqnorm(meta.lme)
@

<<Cotes_Diagnostics_qqnorm_lme,fig=TRUE,echo=false>>=
qqnorm(cotes.lme)
@

\subsubsection{Graphing}
<<Table5_7_lme_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.lme.tbl <- make.plot.table(Table5.7.lme)
Table5.7.lme.plot <- plot.lsmeans.tbl(Table5.7.lme.tbl,title="lme")
Table5.7.lme.plot
@

<<Ex16_8_1_lme_plot,fig=TRUE,echo=false,width=7,height=4>>=
Ex16.8.1.lme.tbl <- make.plot.table(Ex16.8.1.lme,effect="Variety",form=cld ~ Variety)
Ex16.8.1.lme.plot <- plot.lsmeans.tbl(Ex16.8.1.lme.tbl,title="lme",formula=cld ~ Variety)
Ex16.8.1.lme.plot
@

<<>>=
#detach("package:nlme")
@

\subsection{lmer}
\subsubsection{Model Fitting}
<<>>=
library(lme4)
Table5.7.lmer <- lmer(obs ~ 0+trt + (1 | rep), data=Table5.7)

Ex16.8.1.lmer <- lmer(Yield ~ 0 + Variety + (1 | Trial/Rep) + (1 | Trial:Variety), data=Ex16.8.1)
@

\subsubsection{Diagnostics}
<<Table5_7_Diagnostics_lmer,fig=TRUE,echo=false>>=
plot(Table5.7.lmer)
@



\subsubsection{Graphing}
<<Table5_7_lmer_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.lmer.tbl <- make.plot.table(Table5.7.lmer)
Table5.7.lmer.plot <- plot.lsmeans.tbl(Table5.7.lmer.tbl,title="lmer")
Table5.7.lmer.plot
@

<<Ex16_8_1_lmer_plot,fig=TRUE,echo=false,width=7,height=4>>=
Ex16.8.1.lmer.tbl <- make.plot.table(Ex16.8.1.lmer,effect="Variety",form=cld ~ Variety)
Ex16.8.1.lmer.plot <- plot.lsmeans.tbl(Ex16.8.1.lmer.tbl,title="lme",formula=cld ~ Variety)
Ex16.8.1.lmer.plot
@

<<>>=
load(file="meta.lmer.Rda")
load(file="cotes.lmer.Rda")
@

<<META_Diagnostics_qqnorm_lmer,fig=TRUE,echo=false>>=
qqnorm(meta.lmer)
@

<<Cotes_Diagnostics_qqnorm_lmer,fig=TRUE,echo=false>>=
qqnorm(cotes.lmer)
@

<<>>=
#detach("package:lme4")
@

\subsection{blmer}
\subsubsection{Model Fitting}
<<>>=
library(blme)
Table5.7.blmer <- blmer(obs ~ 0 + trt + (1 | rep), data=Table5.7)
Table5.7.normal.blmer <- blmer(obs ~ trt + (1 | rep), data=Table5.7, fixef.prior = normal)

#Ex16.8.1.blmer <- blmer(Yield ~ 0 + Variety + (1 | Trial/Rep) + (1 | Trial:Variety), fixef.prior = normal, data=Ex16.8.1)
Ex16.8.1.blmer <- blmer(Yield ~ Variety + (1 | Trial/Rep) + (1 | Trial:Variety), fixef.prior = normal, data=Ex16.8.1)
@

\subsubsection{Diagnostics}
<<Table5_7_Diagnostics_blmer,fig=TRUE,echo=false>>=
plot(Table5.7.blmer)
@


\subsubsection{Graphing}
<<Table5_7_blmer_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.blmer.tbl <- make.plot.table(Table5.7.blmer)
Table5.7.blmer.plot <- plot.lsmeans.tbl(Table5.7.blmer.tbl,title="blmer")
Table5.7.blmer.plot
@

<<Table5_7_blmer_normal_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.normal.blmer.tbl <- make.plot.table(Table5.7.normal.blmer)
Table5.7.normal.blmer.plot <- plot.lsmeans.tbl(Table5.7.normal.blmer.tbl,title="blmer (normal)")
Table5.7.normal.blmer.plot
@

<<Ex16_8_1_blmer_normal_plot,fig=TRUE,echo=false,width=7,height=4>>=
Ex16.8.1.blmer.tbl <- make.plot.table(Ex16.8.1.blmer,effect="Variety",form=cld ~ Variety)
Ex16.8.1.blmer.plot <- plot.lsmeans.tbl(Ex16.8.1.blmer.tbl,title="blmer",formula=cld ~ Variety)
Ex16.8.1.blmer.plot
@

<<Table5_7_blmer_combined_plot,fig=TRUE,echo=false,width=7,height=4>>=
grid.arrange(arrangeGrob(
   Table5.7.blmer.plot,
   Table5.7.normal.blmer.plot
   ))
@

<<>>=
load(file="meta.blmer.Rda")
load(file="cotes.blmer.Rda")
@

<<META_Diagnostics_qqnorm_blmer,fig=TRUE,echo=false>>=
qqnorm(meta.blmer)
@

<<Cotes_Diagnostics_qqnorm_blmer,fig=TRUE,echo=false>>=
qqnorm(cotes.blmer)
@


<<>>=
#detach("package:blme")  
@

10 glmmPQL
\subsection{glmmPQL}

We don't need to load the glmmPQL library, it's introduced with multcomp. And we must specify a family.
<<>>=
#library(MASS)
#Table5.7.glmmPQL <- glmmPQL(obs ~ trt, random = ~ 1 | rep, data = Table5.7)
#Error in glmmPQL(obs ~ trt, random = ~1 | rep, data = Table5.7) : 
#  argument "family" is missing, with no default
Table5.7.glmmPQL <- glmmPQL(obs ~ trt, family=gaussian, random = ~ 1 | rep, data = Table5.7)
class(Table5.7.glmmPQL)

#error
#Ex16.8.1.glmmPQL <- glmmPQL(Yield ~ Variety*Trial, random = ~ 1 | Trial:Rep , family=gaussian, data = Ex16.8.1)
#Ex16.8.1.glmmPQL <- glmmPQL(Yield ~ 0 + Variety*Trial, random = ~ 1 | Block , family=gaussian, data = Ex16.8.1)
Ex16.8.1$Block <- Ex16.8.1$Trial:Ex16.8.1$Rep
Ex16.8.1.glmmPQL <- glmmPQL(Yield ~ Variety*Trial, random = ~ 1 | Block , family=gaussian, data = Ex16.8.1)


@

\subsubsection{Model Fitting}
\subsubsection{Diagnostics}
<<Table5_7_Diagnostics_glmmPQL,fig=TRUE,echo=false>>=
plot(Table5.7.glmmPQL)
@


\subsubsection{Graphing}
<<Table5_7_glmmPQL_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.glmmPQL.tbl <- make.plot.table(Table5.7.glmmPQL)
Table5.7.glmmPQL.plot <- plot.lsmeans.tbl(Table5.7.glmmPQL.tbl,title="glmmPQL")
Table5.7.glmmPQL.plot
@ 

We can't plot glmmPQL fit
<<Ex16_8_1_glmmPQL_plot,fig=TRUE,echo=false,width=7,height=4>>=
Ex16.8.1.glmmPQL.tbl <- make.plot.table(Ex16.8.1.glmmPQL,effect="Variety",form=cld ~ Variety)
Ex16.8.1.glmmPQL.plot <- plot.lsmeans.tbl(Ex16.8.1.glmmPQL.tbl,title="glmmPQL",formula=cld ~ Variety)
Ex16.8.1.glmmPQL.plot
@

<<>>=
load(file="meta.glmmPQL.Rda")
@

<<META_Diagnostics_qqnorm_glmmPQL,fig=TRUE,echo=false>>=
qqnorm(meta.glmmPQL)
@


\subsection{glmmADMB}

glmmADMB is not available fron CRAN so must be installed via
\verb|install.packages("glmmADMB", repos=c("http://glmmadmb.r-forge.r-project.org/repos", getOption("repos")),type="source")|
\subsubsection{Model Fitting}

Two issues with fitting,
\begin{verbatim}
   Table5.7.admb <- glmmadmb(obs ~ 0+trt, random = ~ 1 | rep, family = "gaussian", data = Table5.7)
   Warning message:
   In eval(expr, envir, enclos) : sd.est not defined for this family
   > Table5.7.admb <- glmmadmb(obs ~ 0+trt, random = ~ 1 | rep, data = Table5.7)
   Warning message:
   In glmmadmb(obs ~ 0 + trt, random = ~1 | rep, data = Table5.7) :
     non-integer response values in discrete family
\end{verbatim}

<<>>=
library(glmmADMB)
Table5.7.admb <- glmmadmb(obs ~ 0+trt, random = ~ 1 | rep, family = "gaussian", data = Table5.7)
class(Table5.7.admb)

Ex16.8.1.admb <- glmmadmb(Yield ~ 0 + Variety, random = ~ 1 | Trial/Rep + Trial:Variety, family = "gaussian", data = Ex16.8.1)
@

\subsubsection{Diagnostics}
<<>>=
#plot(Table5.7.admb)
#Error in xy.coords(x, y, xlabel, ylabel, log) : 
#  'x' is a list, but does not have components 'x' and 'y'
@
\subsubsection{Model Summary}
<<>>=
summary(Table5.7.admb)
#anova(Table5.7.admb)
#Error in anova.glmmadmb(Table5.7.admb) : Two or more model fits required.
summary(aov(Table5.7.admb))
summary(Ex16.8.1.admb)
@

\subsubsection{Model Comparison}
#admb doesn like models without intercepts
<<>>=
#Table5.7.red.admb <- update(Table5.7.admb, . ~ . - trt)
Table5.7.red.admb <- update(Table5.7.admb, . ~ . - trt + 1 )
#Error in svd(x, 0, 0) : a dimension is zero
anova(Table5.7.red.admb,Table5.7.admb)
@

\subsubsection{Multiple Comparisons}
<<>>=
summary(glht(Table5.7.admb,linfct=mcp(trt="Dunnett")))
cld(glht(Table5.7.admb,linfct=mcp(trt="Tukey")),decreasing=TRUE)
print(Table5.7.admb.tbl <- lsmeans(Table5.7.admb,cld ~ trt))
@

\subsubsection{Variance Components}
<<>>=
VarCorr(Table5.7.admb)
fixef(Table5.7.admb)
ranef(Table5.7.admb)
confint(Table5.7.admb)
@

\subsubsection{Graphing}
<<Table5_7_admb_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.admb.tbl <- make.plot.table(Table5.7.admb)
Table5.7.admb.plot <- plot.lsmeans.tbl(Table5.7.admb.tbl,,title="admb")
Table5.7.admb.plot
@  

<<Ex16_8_1_admb_plot,fig=TRUE,echo=false,width=7,height=4>>=
Ex16.8.1.admb.tbl <- make.plot.table(Ex16.8.1.admb,effect="Variety",form=cld ~ Variety)
Ex16.8.1.admb.plot <- plot.lsmeans.tbl(Ex16.8.1.admb.tbl,formula=cld ~ Variety,title="admb")
Ex16.8.1.admb.plot
@  

\subsection{glmmLasso}
\subsubsection{Model Fitting}
<<>>=
library(glmmLasso)
#Error in gradient.lasso(score.beta = score_vec[(q + 1):lin], b = Delta[1,  : 
#  argument "lambda" is missing, with no default
Table5.7.glmmLasso <- glmmLasso(fix = obs ~ trt, rnd = list(rep = ~1), lambda = 1, data = Table5.7)
#problems with lambda = 200
@

\subsubsection{Diagnostics}
<<>>=
#plot(Table5.7.glmmLasso)
#Error in plot.glmmLasso(Table5.7.glmmLasso) : No smooth terms to plot!
@



<<>>=
#Table5.7.glmmLasso.plot <- plot.lsmeans.tbl(Table5.7.glmmLasso.tbl)
#Table5.7.glmmLasso.plot
@
 
 
\subsection{minque}

Not to be confused with the R library \verb|lmm|, which provides several functions for fitting mixed models, but does not seem to be as general.

\subsubsection{Model Fitting}

lmm defaults to "minque", but we are comparing to other models fit using reml criteria.
<<>>=
library(minque)
Table5.7.minque <- lmm(obs ~ trt | rep, data=Table5.7, method="reml")
class(Table5.7.minque)

Ex16.8.1.minque <- lmm(Yield ~ Variety | Trial/Rep + Variety:Trial, data=Ex16.8.1, method="reml")
@

\subsubsection{Diagnostics}
<<>>=
#plot(Table5.7.minque)
#Error in xy.coords(x, y, xlabel, ylabel, log) : 
#  'x' is a list, but does not have components 'x' and 'y'
@
\subsubsection{Model Summary}
<<>>=
summary(Table5.7.minque)
#anova(Table5.7.minque)
#Error in UseMethod("anova") : 
#  no applicable method for 'anova' applied to an object of class "list"
@

\subsubsection{Model Comparison}
<<>>=
Table5.7.red.minque <- lmm(obs ~ 1 | rep, data=Table5.7, method="reml")
#anova(Table5.7.red.minque,Table5.7.minque)
@

\subsubsection{Multiple Comparisons}
<<>>=
#summary(glht(Table5.7.minque,linfct=mcp(trt="Dunnett")))
#cld(glht(Table5.7.minque,linfct=mcp(trt="Tukey")),decreasing=TRUE)
#print(Table5.7.admb.tbl <- lsmeans(Table5.7.minque,cld ~ trt))
@

\subsubsection{Variance Components}
<<>>=
Table5.7.minque[[1]]$Var
Table5.7.minque[[1]]$FixedEffect
Table5.7.minque[[1]]$RandomEffect
@
\subsubsection{Graphing}
minque reports a grand mean and mean effect for all means. We can simply add to get mean estimates.
<<>>=
#mean <- Table5.7.minque$reml$FixedEffect$obs$Est[1]
#minque1.tbl <- Table5.7.minque$reml$FixedEffect$obs$Est[2:7]
#minque1.tbl$Est <- minque1.tbl$Est+mean

#not sure why, but treatments are not in order.

Table5.7.minque.tbl <- data.frame(
   Treatment=c(4,5,6,3,2,1),
   Mean=Table5.7.minque$reml$FixedEffect$obs$Est[1] + Table5.7.minque$reml$FixedEffect$obs$Est[2:7]
   )
Table5.7.minque.tbl$Error <- Table5.7.minque$reml$FixedEffect$obs$SE[2:7]

#I don't find where minque reports df.
Table5.7.minque.tbl$df <- Table5.7.df
#compute a lower and upper confidence interval
Table5.7.minque.tbl$Lower = Table5.7.minque.tbl$Mean -  Table5.7.minque.tbl$Error*qt(1-Table5.7.minque$ALPHA/2,Table5.7.minque.tbl$df)
Table5.7.minque.tbl$Upper = Table5.7.minque.tbl$Mean +  Table5.7.minque.tbl$Error*qt(1-Table5.7.minque$ALPHA/2,Table5.7.minque.tbl$df)
#Group comes from lsmeans, but we'll want this for compatibilty
Table5.7.minque.tbl$Group <- 0
#and since we can't use glht, we have not letters
Table5.7.minque.tbl$Letters <- ""
#Table5.7.minque.tbl$ErrorType <- "CI"
Table5.7.minque.tbl$Treatment <- as.factor(Table5.7.minque.tbl$Treatment)
@

<<Table5_7_minque_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.minque.plot <- plot.lsmeans.tbl(Table5.7.minque.tbl,title="minque")
Table5.7.minque.plot
@

Again, minque has a non-standard order


<<>>=
Ex16.8.1.minque.tbl <- data.frame(
   Treatment=c(12, 1, 3, 4, 5, 10, 2, 7, 8, 9, 6, 11),
   Mean=Ex16.8.1.minque$reml$FixedEffect$Yield$Est[1] + Ex16.8.1.minque$reml$FixedEffect$Yield$Est[2:13]
   )
Ex16.8.1.minque.tbl$Error <- Ex16.8.1.minque$reml$FixedEffect$Yield$SE[2:13]

Ex16.8.1.minque.tbl$df <- Ex16.8.1.df
#compute a lower and upper confidence interval
Ex16.8.1.minque.tbl$Lower = Ex16.8.1.minque.tbl$Mean -   Ex16.8.1.minque.tbl$Error*qt(1-Ex16.8.1.minque$ALPHA/2,Ex16.8.1.minque.tbl$df)
Ex16.8.1.minque.tbl$Upper = Ex16.8.1.minque.tbl$Mean +  Ex16.8.1.minque.tbl$Error*qt(1-Ex16.8.1.minque$ALPHA/2,Ex16.8.1.minque.tbl$df)
Ex16.8.1.minque.tbl$Group <- 0
Ex16.8.1.minque.tbl$Letters <- ""
#Ex16.8.1.minque.tbl$ErrorType <- "CI"
Ex16.8.1.minque.tbl$Treatment <- levels(Ex16.8.1$Variety)[Ex16.8.1.minque.tbl$Treatment]
@

<<Ex16_8_1_minque_plot,fig=TRUE,echo=false,width=7,height=4>>=
Ex16.8.1.minque.plot <- plot.lsmeans.tbl(Ex16.8.1.minque.tbl,title="minque")
Ex16.8.1.minque.plot
@

<<>>=
#detach("package:minque") 
@


\subsection{MCMCglmm}
\subsubsection{Model Fitting}
<<>>=
library(MCMCglmm)
Table5.7.mcmc1 <- MCMCglmm(fixed=obs ~ 0+trt, random = ~ rep, data=Table5.7, verbose=FALSE)

Ex16.8.1.mcmc1 <- MCMCglmm(fixed=Yield ~ 0 + Variety, random = ~ Trial +  Trial:Rep + Trial:Variety, data=Ex16.8.1, verbose=FALSE)
@

\subsubsection{Diagnostics}
This calls dev.new internally, so doesn't respond to mfrow
<<Table5_7_Diagnostics_lm,fig=TRUE,echo=false>>=
par(mfrow = c(2, 2)) 
plot(Table5.7.mcmc1)
par(mfrow = c(1,1))
@
\subsubsection{Model Summary}
<<>>=
summary(Table5.7.mcmc1)
#anova(Table5.7.mcmc1)
@

\subsubsection{Model Comparison}
<<>>=
#Table5.7.red.mcmc1 <- update(Table5.7.mcmc1,fixed=obs ~ 1)
Table5.7.red.mcmc1 <- MCMCglmm(fixed=obs ~ 1, random = ~ rep, data=Table5.7, verbose=FALSE)
@

\subsubsection{Multiple Comparisons}
\subsubsection{Variance Components}
<<>>=
summary(Table5.7.mcmc1)$Gcovariances
summary(Table5.7.mcmc1)$Rcovariances
@

\subsubsection{Graphing}

<<>>=
MCMCglmmfixed <- summary(Table5.7.mcmc1)$solutions
Table5.7.MCMCglmm.tbl <- data.frame(
   Treatment=1:6,
   Mean=MCMCglmmfixed[,1]
)
Table5.7.MCMCglmm.tbl$Error <- NA

#I don't find where inla reports df.
Table5.7.MCMCglmm.tbl$df <- Table5.7.df
#quantiles are for offset values
Table5.7.MCMCglmm.tbl$Lower = MCMCglmmfixed[,2]
Table5.7.MCMCglmm.tbl$Upper = MCMCglmmfixed[,3]
#Group comes from lsmeans, but we'll want this for compatibilty
Table5.7.MCMCglmm.tbl$Group <- 0
#and since we can't use glht, we have not letters
Table5.7.MCMCglmm.tbl$Letters <- ""
#Table5.7.MCMCglmm.tbl$ErrorType <- "est"
Table5.7.MCMCglmm.tbl$Treatment <- as.factor(Table5.7.MCMCglmm.tbl$Treatment)
@

<<Table5_7_MCMCglmm_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.MCMCglmm.plot <- plot.lsmeans.tbl(Table5.7.MCMCglmm.tbl,title="MCMCglmm")
Table5.7.MCMCglmm.plot
@ 

<<>>=
Ex16.8.1.MCMCglmmfixed <- summary(Ex16.8.1.mcmc1)$solutions
Ex16.8.1.MCMCglmm.tbl <- data.frame(
   Treatment=1:length(Ex16.8.1.MCMCglmmfixed[,1]),
   Mean=Ex16.8.1.MCMCglmmfixed[,1]
)
Ex16.8.1.MCMCglmm.tbl$Error <- NA
Ex16.8.1.MCMCglmm.tbl$df <- Table5.7.df
Ex16.8.1.MCMCglmm.tbl$Lower = Ex16.8.1.MCMCglmmfixed[,2]
Ex16.8.1.MCMCglmm.tbl$Upper = Ex16.8.1.MCMCglmmfixed[,3]
Ex16.8.1.MCMCglmm.tbl$Group <- 0
Ex16.8.1.MCMCglmm.tbl$Letters <- ""
#Ex16.8.1.MCMCglmm.tbl$ErrorType <- "est"
Ex16.8.1.MCMCglmm.tbl$Treatment <- levels(Ex16.8.1$Variety)[Ex16.8.1.MCMCglmm.tbl$Treatment]
@


<<Ex16_8_1MCMCglmm_plot,fig=TRUE,echo=false,width=7,height=4>>=
Ex16.8.1.MCMCglmm.plot <- plot.lsmeans.tbl(Ex16.8.1.MCMCglmm.tbl,title="MCMCglmm")
Ex16.8.1.MCMCglmm.plot
@ 


<<>>=
detach("package:MCMCglmm")   
@


 


\subsection{INLA}

Also not on CRAN, install via
\verb|install.packages("INLA", repos="http://www.math.ntnu.no/inla/R/stable")|

H. Rue, S. Martino, and N. Chopin. Approximate Bayesian inference for latent Gaussian models using inte-
grated nested Laplace approximations (with discussion). Journal of the Royal Statistical Society, Series B,
71(2):319{392, 2009. 

INLA seems well suited for spatial and temporal modeling.
\subsubsection{Model Fitting}
<<>>=
library(INLA)
Table5.7.inla <- inla(obs ~ 0 + trt + f(rep, model="iid"), data=Table5.7)
class(Table5.7.inla)

#if we use this model, the errors are very large
Ex16.8.1.inla <- inla(Yield ~ 0 + Variety + f(Trial, model="iid") + f(Trial:Rep, model="iid") + f(Trial:Variety, model="iid"), data=Ex16.8.1)
#Ex16.8.1.inla <- inla(Yield ~ Variety + f(Trial, model="iid") + f(Trial:Variety, model="iid") + f(Trial:Rep, model="iid"), data=Ex16.8.1)
#error
#Ex16.8.1.inla <- inla(Yield ~ 0 + Variety*Trial + f(Trial:Rep, model="iid"), data=Ex16.8.1)

@

\subsubsection{Diagnostics}
There are three plots but this seems to skip over mfrow. 

INLA:::plot.inla and INLA:::inla.dev.new

It was address for RStudio
\begin{verbatim}
function (...) 
{
    dev = getOption("device")
    if (is.character(dev) && inla.strncasecmp(dev, "RStudioGD")) {
        ret = NULL
    }
    else {
        ret = dev.new(...)
    }
    if (exists("inla.dev.new.hook") && is.function(inla.dev.new.hook)) {
        inla.dev.new.hook()
    }
    return(invisible(ret))
}
\end{verbatim}

<<Table5_7_Diagnostics_inla,fig=TRUE,echo=false>>=
#inla.dev.new <- function(...) {
#   return(NULL)
#}
#par(mfrow = c(2, 2)) 
plot(Table5.7.inla)

#par(mfrow = c(1,1))
@

There is a solution in \verb|http://stackoverflow.com/questions/21534751/in-r-and-knitr-how-do-i-plot-inla-results|

<<results=tex, echo=FALSE>>=
figs = plot(Table5.7.inla, postscript=TRUE, prefix="figure-")

cat("\\begin{figure}[tbp]\n")
cat("\n")
cat("\\centering\n")

for(i in 1:length(figs)) {
    cat("\\includegraphics[width=7cm,height=5cm,angle=-90]{",
    gsub("[.]eps$","",figs[i]), "}\n", sep="")
}

cat("\\caption{XXX}\n")
cat("\\label{fig:11}\n")
cat("\\end{figure}\n")
@

\subsubsection{Model Summary}
<<>>=
Table5.7.inla
summary(Table5.7.inla)
#anova(Table5.7.inla)
#Error in UseMethod("anova") : 
#  no applicable method for 'anova' applied to an object of class "inla"
#summary(aov(Table5.7.inla))
@

\subsubsection{Model Comparison}
<<>>=
Table5.7.red.inla <- inla(obs ~ 1 + f(rep, model="iid"), data=Table5.7)
#Table5.7.red.inla <- update(Table5.7.inla, . ~ . -trt)
#Error: $ operator is invalid for atomic vectors
@
\subsubsection{Multiple Comparisons}
<<>>=
#lsmeans(Table5.7.inla,cld ~ trt)
#Error in ref.grid(object = list(names.fixed = c("(Intercept)", "trt2",  : 
#  Can't handle an object of class  "inla" 
# Use help("models", package = "lsmeans") for information on supported models.
@


\subsubsection{Graphing}
Manually produce means table. 
<<>>=
#this is a matrix, but not a data frame
inla.fixed <- summary(Table5.7.inla)$fixed

Table5.7.inla.tbl <- data.frame(
   Treatment=1:6,
   Mean=inla.fixed[,1]
)
   
Table5.7.inla.tbl$Error <- inla.fixed[,2]

#I don't find where inla reports df.
Table5.7.inla.tbl$df <- Table5.7.df
#quantiles are for offset values
#Table5.7.inla.tbl$Lower = c(inla.fixed[1,3],inla.fixed[2:6,3]+inla.fixed[1,1])
#Table5.7.inla.tbl$Upper = c(inla.fixed[1,5],inla.fixed[2:6,5]+inla.fixed[1,1])
Table5.7.inla.tbl$Lower = inla.fixed[,3]
Table5.7.inla.tbl$Upper = inla.fixed[,5]

#Group comes from lsmeans, but we'll want this for compatibilty
Table5.7.inla.tbl$Group <- 0
#and since we can't use glht, we have not letters
Table5.7.inla.tbl$Letters <- ""
#Table5.7.inla.tbl$ErrorType <- "sd"
Table5.7.inla.tbl$Treatment <- as.factor(Table5.7.inla.tbl$Treatment)
@

<<Table5_7_inla_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.inla.plot <- plot.lsmeans.tbl(Table5.7.inla.tbl)
Table5.7.inla.plot
@

<<>>=
#this is a matrix, but not a data frame
inla.fixed <- summary(Ex16.8.1.inla)$fixed

Ex16.8.1.inla.tbl <- data.frame(
   Treatment=1:12,
   #Mean=c(inla.fixed[1,1],inla.fixed[1,1] + inla.fixed[2:12,1])
   Mean=inla.fixed[,1]
)
   
Ex16.8.1.inla.tbl$Error <- inla.fixed[,2]

#I don't find where inla reports df.
Ex16.8.1.inla.tbl$df <- Ex16.8.1.df
Ex16.8.1.inla.tbl$Lower = inla.fixed[,3]
Ex16.8.1.inla.tbl$Upper = inla.fixed[,5]

Ex16.8.1.inla.tbl$Group <- 0
Ex16.8.1.inla.tbl$Letters <- ""
#Ex16.8.1.inla.tbl$ErrorType <- "sd"
Ex16.8.1.inla.tbl$Treatment <- levels(Ex16.8.1$Variety)[Ex16.8.1.inla.tbl$Treatment]
@


<<Ex16_8_1_inla_plot,fig=TRUE,echo=false,width=7,height=4>>=
Ex16.8.1.inla.plot <- plot.lsmeans.tbl(Ex16.8.1.inla.tbl,title="inla")
Ex16.8.1.inla.plot
@

<<>>=
#detach("package:INLA") 
@

\subsection{brms}
Uses rstan for linear mixed models.
Fit Bayesian generalized (non-)linear multilevel models using Stan for full Bayesian inference.

\begin{verbatim}
Author
Paul-Christian Buerkner [aut, cre]
Date of publication
2016-09-16 12:50:24
Maintainer
Paul-Christian Buerkner <paul.buerkner@gmail.com>
License
GPL (>= 3)
Version
1.0.1
\end{verbatim}

Note that this needs stan to be installed, apparently not just rstan. May have been a failure in the rstan install, so ran in R
\verb|install.packages("rstan", dependencies = TRUE)|

\subsubsection{Model Fitting}
Note that loading brms masked VarCorr
<<>>=
library(brms)
#library(rstan)
Table5.7.brms <- brm(obs ~ 0+trt + (1 | rep), data=Table5.7)
#class(Table5.7.brms)

Ex16.8.1.brms <- brm(Yield ~ 0 + Variety + (1 | Trial/Rep) + (1 | Trial:Variety), data=Ex16.8.1)
@

\subsubsection{Diagnostics}
brms can't be used with literate programming - hangs on plot
but can use parameters to make fit one plot
<<Table5_7_Diagnostics_brms,fig=TRUE,echo=false,width=5,height=6>>=
par(mfrow = c(1,2)) 
#plot(Table5.7.brms)
plot(Table5.7.brms,pars=c("b_trt1","b_trt2","b_trt3","sd_rep_Intercept","sigma"))
par(mfrow = c(1,1))
@


\subsubsection{Graphing}
<<>>=
brms.fixed <- summary(Table5.7.brms)$fixed

Table5.7.brms.tbl <- data.frame(
   Treatment=1:6,
   Mean=brms.fixed[,1]
   #Mean=c(brms.fixed[1,1],brms.fixed[2:6,1]+brms.fixed[1,1])
)
   
Table5.7.brms.tbl$Error <- brms.fixed[,2]

#I don't find where inla reports df.
Table5.7.brms.tbl$df <- Table5.7.df
#quantiles are for offset values
#Table5.7.brms.tbl$Lower = c(brms.fixed[1,3],brms.fixed[2:6,3]+brms.fixed[1,1])
#Table5.7.brms.tbl$Upper = c(brms.fixed[1,4],brms.fixed[2:6,4]+brms.fixed[1,1])
Table5.7.brms.tbl$Lower = brms.fixed[,3]
Table5.7.brms.tbl$Upper = brms.fixed[,4]
#Group comes from lsmeans, but we'll want this for compatibilty
Table5.7.brms.tbl$Group <- 0
#and since we can't use glht, we have not letters
Table5.7.brms.tbl$Letters <- ""
#Table5.7.brms.tbl$ErrorType <- "est"
Table5.7.brms.tbl$Treatment <- as.factor(Table5.7.brms.tbl$Treatment)
@

<<Table5_7_brms_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.brms.plot <- plot.lsmeans.tbl(Table5.7.brms.tbl)
Table5.7.brms.plot
@


<<>>=
brms.fixed <- summary(Ex16.8.1.brms)$fixed

Ex16.8.1.brms.tbl <- data.frame(
   Treatment=1:12,
   Mean=brms.fixed[,1]
   #Mean=c(brms.fixed[1,1],brms.fixed[2:6,1]+brms.fixed[1,1])
)
   
Ex16.8.1.brms.tbl$Error <- brms.fixed[,2]

#I don't find where inla reports df.
Ex16.8.1.brms.tbl$df <- Ex16.8.1.df
#quantiles are for offset values
#Ex16.8.1.brms.tbl$Lower = c(brms.fixed[1,3],brms.fixed[2:6,3]+brms.fixed[1,1])
#Ex16.8.1.brms.tbl$Upper = c(brms.fixed[1,4],brms.fixed[2:6,4]+brms.fixed[1,1])
Ex16.8.1.brms.tbl$Lower = brms.fixed[,3]
Ex16.8.1.brms.tbl$Upper = brms.fixed[,4]
#Group comes from lsmeans, but we'll want this for compatibilty
Ex16.8.1.brms.tbl$Group <- 0
#and since we can't use glht, we have not letters
Ex16.8.1.brms.tbl$Letters <- ""
Ex16.8.1.brms.tbl$Treatment <- levels(Ex16.8.1$Variety)[Ex16.8.1.brms.tbl$Treatment]
@

<<Ex16_8_1_brms_plot,fig=TRUE,echo=false,width=7,height=4>>=
Ex16.8.1.brms.plot <- plot.lsmeans.tbl(Ex16.8.1.brms.tbl,title="MCMCglmm")
Ex16.8.1.brms.plot
@

\section{Function Comparisons}

Another plot to compare functions. 
Note that admb using different headers

<<>>= 
#Table5.7.lm.tbl$Function <- "lm"
Table5.7.lme.tbl$Function <- "lme"
Table5.7.lmer.tbl$Function <- "lmer"
Table5.7.blmer.tbl$Function <- "blmer"
Table5.7.glmmPQL.tbl$Function <- "glmmPQL"
Table5.7.admb.tbl$Function <- "admb"
Table5.7.minque.tbl$Function <- "minque"
Table5.7.MCMCglmm.tbl$Function <- "MCMCglmm"
Table5.7.inla.tbl$Function <- "inla"
Table5.7.brms.tbl$Function <- "brms" 

#c(4,5,6,3,2,1)

<<>>=
Table5.7.comb.tbl <- rbind(
   Table5.7.lme.tbl,
   Table5.7.lmer.tbl,
   Table5.7.blmer.tbl,
   Table5.7.glmmPQL.tbl,
   Table5.7.admb.tbl,
   Table5.7.minque.tbl[c(6,5,4,1,2,3),],
   Table5.7.MCMCglmm.tbl,
   Table5.7.inla.tbl,
   Table5.7.brms.tbl
)
Table5.7.means <- tapply(Table5.7$obs,list(Table5.7$trt),mean)
Table5.7.comb.tbl$Average <-Table5.7.means[Table5.7.comb.tbl$Treatment]
@

<<Table5_7_comp_plot,fig=TRUE,echo=false,width=7,height=4>>=
Table5.7.comb.tbl$Treatment <- as.factor(Table5.7.comb.tbl$Treatment)
Table5.7.comp.plot <- plot.lsmeans.tbl(Table5.7.comb.tbl)
Table5.7.comp.plot+facet_wrap(~Function)
@

<<Table5_7_comp_linear_plot,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(Table5.7.comb.tbl, aes(Average,Mean)) + geom_point(aes(color=Function)) + geom_smooth(aes(group=Function,color=Function,linetype=Function),weight=10,se = FALSE,method="lm") + scale_colour_manual(values=cbPalette)
@

<<>>= 
Ex16.8.1.lm.tbl$Function <- "lm"
Ex16.8.1.lme.tbl$Function <- "lme"
Ex16.8.1.blmer.tbl$Function <- "blmer"
Ex16.8.1.glmmPQL.tbl$Function <- "glmmPQL"
Ex16.8.1.admb.tbl$Function <- "admb"
Ex16.8.1.minque.tbl$Function <- "minque"
Ex16.8.1.MCMCglmm.tbl$Function <- "MCMCglmm"
Ex16.8.1.inla.tbl$Function <- "inla"
Ex16.8.1.brms.tbl$Function <- "brms" 

#c(12, 1, 3, 4, 5, 10, 2, 7, 8, 9, 6, 11)
#c(2,7,3, 4,5,11, 8,9,10, 6,12,1)


Ex16.8.1.comb.tbl <- rbind(Ex16.8.1.lm.tbl,
   Ex16.8.1.lme.tbl,
   Ex16.8.1.blmer.tbl,
   Ex16.8.1.glmmPQL.tbl,
   Ex16.8.1.admb.tbl,
   Ex16.8.1.minque.tbl[c(2,7,3, 4,5,11, 8,9,10, 6,12,1),],
   Ex16.8.1.MCMCglmm.tbl,
   #Ex16.8.1.inla.tbl,
   Ex16.8.1.brms.tbl[c(11,4,12,10,1,9,8,2,7,3,6,5),]
)

Ex16.8.1.means <- tapply(Ex16.8.1$Yield,list(Ex16.8.1$Variety),mean)
Ex16.8.1.comb.tbl$Average <-Ex16.8.1.means[as.character(Ex16.8.1.comb.tbl$Treatment)]
Ex16.8.1.comb.tbl$Treatment <- as.factor(as.character(Ex16.8.1.comb.tbl$Treatment))
Ex16.8.1.comb.tbl$Function <- as.factor(Ex16.8.1.comb.tbl$Function)
@

<<Ex16_8_1__comp_linear_plot,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(Ex16.8.1.comb.tbl, aes(Average,Mean)) + geom_point(aes(color=Function)) + geom_smooth(aes(group=Function,color=Function,linetype=Function),weight=10,se = FALSE,method="lm") + scale_colour_manual(values=cbbPalette)
@

<<Ex16_8_1_combined_plot,fig=TRUE,echo=false,width=7,height=4>>=
grid.arrange(arrangeGrob(
   Ex16.8.1.lm.plot,
   Ex16.8.1.lme.plot,
   Ex16.8.1.blmer.plot,
   Ex16.8.1.glmmPQL.plot,
   Ex16.8.1.admb.plot,
   Ex16.8.1.minque.plot,
   Ex16.8.1.MCMCglmm.plot#,
   #Ex16.8.1.brms.plot
   ))
@

<<Ex16_8_1_comp_linear_plot,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(Ex16.8.1.comb.tbl, aes(Average,Mean)) + geom_point(aes(color=Function)) + geom_smooth(aes(group=Function,color=Function,linetype=Function),weight=10,se = FALSE,method="lm") + scale_colour_manual(values=cbbPalette)
@

<<Ex16_8_1_comp_plot,fig=TRUE,echo=false,width=7,height=4>>=
Ex16.8.1.comp.plot <- plot.lsmeans.tbl(Ex16.8.1.comb.tbl)
Ex16.8.1.comp.plot+facet_wrap(~Function,nrow=4)
@



<<Table5_7_comp2_plot,fig=TRUE,echo=false,width=7,height=4>>=
dodge <- position_dodge(width = 0.9)
ggplot(data = Table5.7.comb.tbl, aes(x = Treatment, y = Mean, fill = Function)) + 
  geom_bar(stat = "identity", position = dodge) +
  coord_cartesian(ylim = c(min(Table5.7.comb.tbl$Lower), max(Table5.7.comb.tbl$Upper))) + 
  geom_errorbar(aes(ymax = Upper,
                ymin = Lower), position = dodge, width = 0.25) + scale_fill_manual(values=cbPalette)
@

<<Ex16_8_1_comp2_plot,fig=TRUE,echo=false,width=7,height=4>>=
ggplot(data = Ex16.8.1.comb.tbl, aes(x = Treatment, y = Mean, fill = Function)) + 
  geom_bar(stat = "identity", position = dodge) +
  coord_cartesian(ylim = c(min(Ex16.8.1.comb.tbl$Lower), max(Ex16.8.1.comb.tbl$Upper))) + 
  geom_errorbar(aes(ymax = Upper,
                ymin = Lower), position = dodge, width = 0.25) + scale_fill_manual(values=cbPalette)
@


\section{META}

<<>>=
load(file="meta.lme.Rda")
load(file="cotes.lme.Rda")
@

<<meta_Diagnostics_lme,fig=TRUE,echo=false>>=
par(mfrow = c(2, 2))
plot(meta.lme)
plot(cotes.lme)
qqnorm(meta.lme)
qqnorm(cotes.lme)
par(mfrow = c(1, 1))
@

<<cotes_Diagnostics_normalized_lme,fig=TRUE,echo=false>>=
plot(cotes.lme)
@

<<meta_Diagnostics_qqnorm_lme,fig=TRUE,echo=false>>=
qqnorm(meta.lme)
@

<<meta_Diagnostics_qqnorm_lme,fig=TRUE,echo=false>>=
qqnorm(cotes.lme)
@

<<meta_lme_plot,fig=TRUE,echo=false,width=7,height=4>>=
meta.lme.tbl <- make.plot.table(meta.lme)
meta.lme.plot <- plot.lsmeans.tbl(meta.lme.tbl,title="lme")
meta.lme.plot
@

<<cotes_lme_plot,fig=TRUE,echo=false,width=7,height=4>>=
cotes.lme.tbl <- make.plot.table(cotes.lme)
cotes.lme.plot <- plot.lsmeans.tbl(cotes.lme.tbl,title="lme")
cotes.lme.plot
@


<<>>=
setwd(initwd)
@

\end{document}
